"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _models=require("../../database/models");var _utils=require("../../utils");var _computation=require("../../computation");var _sequelize=_interopRequireDefault(require("../transaction/sequelize"));var _currencyConverterLt=_interopRequireDefault(require("currency-converter-lt"));var _csvtojson=_interopRequireDefault(require("csvtojson"));function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e};}// controllr
class UserProjectsController{// get all projects
static async getAllProjectsTemplates(req,res){try{// fetch all projects and their work specification and include equipments with UserEstimationLibrary junction table
const template=await _models.Templates.findAll({order:[["createdAt","DESC"]]});return(0,_utils.onSuccess)(res,200,"Success",template);}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again.",error.message);}}static async getAllProjects(req,res){try{// fetch all projects and their work specification and include equipments with UserEstimationLibrary junction table
const{id:userId,role}=req.user;if(role==="admin"){const projects=await _models.Projects.findAll({where:{adminId:userId},order:[["createdAt","DESC"]],include:[{model:_models.ProjectGroup,as:"main_project"}]});return(0,_utils.onSuccess)(res,200,"Projects Fetched Successfully",projects);}if(role==="manager"){const projects=await _models.Projects.findAll({where:{userId},order:[["createdAt","DESC"]],include:[{model:_models.ProjectGroup,as:"main_project"},{model:_models.UserEstimations,as:'estimations'}]});return(0,_utils.onSuccess)(res,200,"Projects Fetched Successfully",projects);}if(role==="owner"){const template=await _models.Templates.findAll({order:[["createdAt","DESC"]]});return(0,_utils.onSuccess)(res,200,"Success",template);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again",error.message);}}static async getProjectByStatus(req,res){try{const{id:userId,role}=req.user;const{status}=req.query;if(role==="admin"){const projects=await _models.Projects.findAll({where:{adminId:userId,status:status},order:[["createdAt","DESC"]]});return(0,_utils.onSuccess)(res,200,"Projects Fetched Successfully",projects);}if(role==="manager"){const projects=await _models.Projects.findAll({where:{userId,status:status},order:[["createdAt","DESC"]]});return(0,_utils.onSuccess)(res,200,"Projects Fetched Successfully",projects);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again");}}// get project by id
static async getProjectById(req,res){try{const{id:userId,managerId,role}=req.user;if(role==="admin"){const project=await _models.Projects.findOne({where:{id:req.params.id,adminId:userId},include:[{model:_models.ProjectAddons,as:"addons"},{model:_models.ProjectGroup,as:"main_project"}]});const estimations=await _models.UserEstimations.findAll({where:{userId:managerId,projectId:req.params.id},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}},{model:_models.UserEstimationsConsumption,as:"estimation_consumed",include:[{model:_models.UserEquipmentConsumption,as:"consumed_equipment",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserEquipments,as:"consumed_equipment",attributes:["name","unit"]}]},{model:_models.UserLabourConsumption,as:"consumed_labour",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserLabours,as:"consumed_labour",attributes:["name","unit"]}]},{model:_models.UserMaterialConsumption,as:"consumed_material",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserMaterials,as:"consumed_material",attributes:["name","unit"]}]},{model:_models.UserSubcontractorConsumption,as:"consumed_subcontractor",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserSubContractors,as:"consumed_subcontractor",attributes:["name","unit"]}]}]}]});const projectData={...project.dataValues,activities:estimations};return(0,_utils.onSuccess)(res,200,"Project Fetched Successfully",projectData);}if(role==="manager"){const project=await _models.Projects.findOne({where:{id:req.params.id,userId:userId},include:[{model:_models.ProjectAddons,as:"addons"},{model:_models.ProjectGroup,as:"main_project"}]});const estimations=await _models.UserEstimations.findAll({where:{userId,projectId:req.params.id},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}},{model:_models.UserEstimationsConsumption,as:"estimation_consumed",include:[{model:_models.UserEquipmentConsumption,as:"consumed_equipment",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal"],include:[{model:_models.UserEquipments,as:"consumed_equipment",attributes:["name","unit"]}]},{model:_models.UserLabourConsumption,as:"consumed_labour",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal"],include:[{model:_models.UserLabours,as:"consumed_labour",attributes:["name","unit"]}]},{model:_models.UserMaterialConsumption,as:"consumed_material",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal"],include:[{model:_models.UserMaterials,as:"consumed_material",attributes:["name","unit"]}]},{model:_models.UserSubcontractorConsumption,as:"consumed_subcontractor",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal"],include:[{model:_models.UserSubContractors,as:"consumed_subcontractor",attributes:["name","unit"]}]},{model:_models.UserEquipmentConsumption,as:"consumed_equipment",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserEquipments,as:"consumed_equipment",attributes:["name","unit"]}]},{model:_models.UserLabourConsumption,as:"consumed_labour",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserLabours,as:"consumed_labour",attributes:["name","unit"]}]},{model:_models.UserMaterialConsumption,as:"consumed_material",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserMaterials,as:"consumed_material",attributes:["name","unit"]}]},{model:_models.UserSubcontractorConsumption,as:"consumed_subcontractor",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserSubContractors,as:"consumed_subcontractor",attributes:["name","unit"]}]}]}]});const projectData={...project.dataValues,activities:estimations};return(0,_utils.onSuccess)(res,200,"Project Fetched Successfully",projectData);}if(role==="owner"){const template=await _models.Templates.findOne({where:{id:req.params.id}});const estimations=await _models.Estimations.findAll({where:{templateId:req.params.id},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.EstimationSubcategory,as:"subcategory",attributes:["name","code",'id',"mainCategoryId"]}]},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const templateData={...template.dataValues,activities:estimations};return(0,_utils.onSuccess)(res,200,"All template returned Successfully",templateData);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again",error.message);}}// create project and  imports estimations equipments into project
static async createProject(req,res){try{const{id:userId,managerId,role}=req.user;const{name,vat,groupId}=req.body;// convert vat to percentage
const vatPercentage=vat<=0?0:vat*0.01;if(role==="admin"){const projectExist=await _models.Projects.findOne({where:{name,adminId:userId}});if(projectExist){return(0,_utils.onError)(res,400,"Project name already exists");}// create project
const project=await _models.Projects.create({...req.body,adminId:userId,userId:managerId,groupId});return(0,_utils.onSuccess)(res,201,"Project Created Successfully",project);}if(role==="manager"){// project name already exists
const projectExist=await _models.Projects.findOne({where:{name,userId}});if(projectExist){return(0,_utils.onError)(res,400,"Project name already exists");}// create project
const project=await _models.Projects.create({...req.body,userId,vat:vatPercentage,groupId});return(0,_utils.onSuccess)(res,201,"Project Created Successfully",project);}if(role==="owner"){// project name already exists
const templateExist=await _models.Templates.findOne({where:{name}});if(templateExist){return(0,_utils.onError)(res,400,"Template name already exists");}// create project
const template=await _models.Templates.create({...req.body,vat:vatPercentage});return(0,_utils.onSuccess)(res,201,"Created Successfully",template);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// edit project
static async editProject(req,res){try{const{id:userId,managerId,role}=req.user;const{name,description,client,contractor,consultant,startDate,endDate,status,currencyCode,vat,isApproved,groupId}=req.body;if(role==="manager"||role==="admin"){const project=await _models.Projects.findOne({where:{id:req.params.id,userId:managerId?managerId:userId}});if(!project){return(0,_utils.onError)(res,404,"Project Not Found");}// get editedvalue
const editedName=name?name:project.name;const editedDescription=description?description:project?.description;const editedClient=client?client:project?.client;const editedContractor=contractor?contractor:project?.contractor;const editedConsultant=consultant?consultant:project?.consultant;const editedStartDate=startDate?startDate:project?.startDate;const editedEndDate=endDate?endDate:project?.endDate;const editedStatus=status?status:project?.status;const existingCurrencyCode=project?.currencyCode;const editedVAT=vat?vat*0.01:+project?.vat;const approved=isApproved?isApproved:project.isApproved;const estimations=await _models.UserEstimations.findAll({where:{userId:managerId?managerId:userId,projectId:req.params.id},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});for(let estimation of estimations){const estimationId=estimation.id;const equipments=estimation?.equipments;const materials=estimation?.materials;const labours=estimation?.labours;const subContractors=estimation?.subContractors;const estimationQty=+estimation?.estimationQuantity;const wastage=+estimation?.wastagePercentage;const transport=+estimation?.transportPercentage;const profit=+estimation?.profitPercentage;const overHead=+estimation?.overHeadPercentage;const contigency=+estimation?.contigencyPercentage;const oldEstimationRate=+estimation?.estimationRate;const oldEstimationTotalAmount=+estimation?.estimationTotalAmount;let equipmentTotal=0;let fuelTotal=0;let labourTotal=0;let subcontractorTotal=0;const hasEquipment=equipments.length===0?true:false;const hasMaterial=materials.length===0?true:false;const hasLabour=labours.length===0?true:false;const hasSubcontractor=subContractors.length===0?true:false;const rate=hasEquipment&&hasMaterial&&hasLabour&&hasSubcontractor?true:false;// ============Loop for equipment calculation===============
for(let i=0;i<equipments.length;i++){const equipment=equipments[i];// equipment Performance
const equipmentPerformance=+equipment?.caveragePerUnit*estimationQty;// apply editedCurrencyValue
const appliedPrice=+equipment.hireRatePrice;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const calculatedPrice=+equipment?.number*finalPrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// ==============EQUIPMENT TOTAL PRICE====================
equipmentTotal+=equipmentTotalAmount;// update equipment
const equip=await _models.UserEquipments.findOne({where:{id:equipment.id}});await equip.update({hireRatePrice:finalPrice});// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimationId,equipmentId:equipment.id}});await estimationLibary.update({equipmentPerformance:equipmentPerformance,equipmentTotalAmount:equipmentTotalAmount});}// LOOP THROUGH MATERIALS
for(let i=0;i<materials.length;i++){const material=materials[i];// calculate machine quantinty formula
// formaulas material and equipment
const materialFactorQuantity=+material.caveragePerUnit*estimationQty;const appliedPrice=+material.price;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const materialTotalAmount=materialFactorQuantity*finalPrice;// update material
const mat=await _models.UserMaterials.findOne({where:{id:material.id}});await mat.update({price:finalPrice});// ==============MATERIAL TOTAL PRICE====================
fuelTotal+=materialTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimationId,materialId:material.id}});await estimationLibary.update({materialFactorQuantity:materialFactorQuantity.toFixed(2),materialTotalAmount:materialTotalAmount.toFixed(2)});}// LOOP THROUGH LABOURS
for(let i=0;i<labours.length;i++){const labor=labours[i];// formaulas
const labourFactorQuantity=+labor.caveragePerUnit*estimationQty;const appliedPrice=+labor.wages;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const calculatedWages=+labor.number*finalPrice*labourFactorQuantity;const labourTotalAmount=calculatedWages;// update labour
const labour=await _models.UserLabours.findOne({where:{id:labor.id}});await labour.update({wages:finalPrice});// ==============MATERIAL TOTAL PRICE====================
labourTotal+=labourTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimationId,labourId:labor.id}});await estimationLibary.update({labourFactorQuantity,labourTotalAmount});}// LOOP THROUGH SUBCONTRACTORS
for(let i=0;i<subContractors.length;i++){const subc=subContractors[i];// formaulas
const appliedPrice=+subc.price;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const subContractorTotalAmount=finalPrice;// update subcontractor
const sub=await _models.UserSubContractors.findOne({where:{id:subc.id}});await sub.update({price:finalPrice});// ==============MATERIAL TOTAL PRICE====================
subcontractorTotal+=subContractorTotalAmount;const updatesub=await _models.UserSubContractors.findOne({where:{id:subc.id}});await updatesub.update({quantity:estimationQty});// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimationId,subContractorId:subc.id}});await estimationLibary.update({subContractorTotalAmount});}// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=fuelTotal*wastage;const calculatedTransportTotal=fuelTotal*transport;// material
const materialCostPerWorkItem=fuelTotal+ +calculatedWastageTotal+ +calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/estimationQty;// equipment
const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/estimationQty;// labour
const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/estimationQty;// subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// // calculate subtotal formula ========= Subtotal =========
const calculatedSubtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate material Total ======= Material Total ==========
const materialTotal=fuelTotal+calculatedWastageTotal+calculatedTransportTotal;const newEstimationRate=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+subcontractorCostPerWorkItem;// // calculate profile, overhead and contigency formula
const calculatedOverHead=newEstimationRate*estimationQty*overHead;const tempProfit=newEstimationRate*estimationQty+calculatedOverHead;const calculatedProfit=tempProfit*profit;const tempContigency=newEstimationRate*estimationQty+calculatedProfit;const calculatedContigency=tempContigency*contigency;// calculate estimationRate and estimationTotalAmount formula
const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;// rate per unit formula
const indirectRatePerUnit=indirectCostPerWorkItem/estimationQty;const totalAmount=calculatedSubtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await estimation.update({wastagePercentage:wastage,transportPercentage:transport,profitPercentage:profit,overHeadPercentage:overHead,contigencyPercentage:contigency,equipmentTotal:equipmentTotal?.toFixed(2),materialTotal:materialTotal?.toFixed(2),wastageTotal:calculatedWastageTotal?.toFixed(2),transportTotal:calculatedTransportTotal?.toFixed(2),subtotal:calculatedSubtotal?.toFixed(2),profitTotal:calculatedProfit?.toFixed(2),overHeadTotal:calculatedOverHead?.toFixed(2),contigencyTotal:calculatedContigency?.toFixed(2),estimationRate:rate?oldEstimationRate:ratePerUnit?.toFixed(2),estimationTotalAmount:rate?oldEstimationTotalAmount:totalAmount?.toFixed(2),estimationQuantity:estimationQty,materialCostPerWorkItem:materialCostPerWorkItem?.toFixed(2),materialRatePerUnit:materialRatePerUnit?.toFixed(2),equipmentCostPerWorkItem:equipmentCostPerWorkiItem?.toFixed(2),equipmentRatePerUnit:equipmentRatePerUnit?.toFixed(2),indirectCostPerWorkItem:indirectCostPerWorkItem?.toFixed(2),indirectRatePerUnit:indirectRatePerUnit?.toFixed(2),labourCostperWorkItem:labourCostperWorkItem?.toFixed(2),labourRatePerUnit:labourRatePerUnit?.toFixed(2),subcontractorCostPerWorkItem:subcontractorCostPerWorkItem?.toFixed(2)});}// update project
await project.update({name:editedName,description:editedDescription,client:editedClient,contractor:editedContractor,consultant:editedConsultant,startDate:editedStartDate,endDate:editedEndDate,status:editedStatus,currencyCode:currencyCode,vat:editedVAT,isApproved:approved,groupId});const updatedProject=await project.reload();return(0,_utils.onSuccess)(res,200,"Project Updated Successfully",updatedProject);}if(role==="owner"){const template=await _models.Templates.findOne({where:{id:req.params.id}});if(!template){return(0,_utils.onError)(res,404,"Template Not Found");}// get editedvalue
const editedName=name?name:template.name;const editedDescription=description?description:template?.description;const editedStatus=status?status:template?.status;const editedVAT=vat?vat*0.01:+template?.vat;const approved=isApproved?isApproved:template.isApproved;const existingCurrencyCode=template?.currencyCode;const estimations=await _models.Estimations.findAll({where:{templateId:req.params.id},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code","id"]},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});for(let estimation of estimations){const estimationId=estimation.id;const equipments=estimation?.equipments;const materials=estimation?.materials;const labours=estimation?.labours;const subContractors=estimation?.subContractors;const estimationQty=+estimation?.estimationQuantity;const wastage=+estimation?.wastagePercentage;const transport=+estimation?.transportPercentage;const profit=+estimation?.profitPercentage;const overHead=+estimation?.overHeadPercentage;const contigency=+estimation?.contigencyPercentage;let equipmentTotal=0;let fuelTotal=0;let labourTotal=0;let subcontractorTotal=0;// ============Loop for equipment calculation===============
for(let i=0;i<equipments.length;i++){const equipment=equipments[i];// equipment Performance
const equipmentPerformance=+equipment?.caveragePerUnit*estimationQty;// apply editedCurrencyValue
const appliedPrice=+equipment.hireRatePrice;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const calculatedPrice=+equipment?.number*finalPrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// ==============EQUIPMENT TOTAL PRICE====================
equipmentTotal+=equipmentTotalAmount;// update equipment
const equip=await _models.Equipments.findOne({where:{id:equipment.id}});await equip.update({hireRatePrice:finalPrice});// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimationId,equipmentId:equipment.id}});await estimationLibary.update({equipmentPerformance:equipmentPerformance,equipmentTotalAmount:equipmentTotalAmount});}// LOOP THROUGH MATERIALS
for(let i=0;i<materials.length;i++){const material=materials[i];// calculate machine quantinty formula
// formaulas material and equipment
const materialFactorQuantity=+material.caveragePerUnit*estimationQty;const appliedPrice=+material.price;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const materialTotalAmount=materialFactorQuantity*finalPrice;// update material
const mat=await _models.Materials.findOne({where:{id:material.id}});await mat.update({price:finalPrice});// ==============MATERIAL TOTAL PRICE====================
fuelTotal+=materialTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimationId,materialId:material.id}});await estimationLibary.update({materialFactorQuantity:materialFactorQuantity.toFixed(2),materialTotalAmount:materialTotalAmount.toFixed(2)});}// LOOP THROUGH LABOURS
for(let i=0;i<labours.length;i++){const labor=labours[i];// formaulas
const labourFactorQuantity=+labor.caveragePerUnit*estimationQty;const appliedPrice=+labor.wages;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const calculatedWages=+labor.number*finalPrice*labourFactorQuantity;const labourTotalAmount=calculatedWages;// update labour
const labour=await _models.Labours.findOne({where:{id:labor.id}});await labour.update({wages:finalPrice});// ==============MATERIAL TOTAL PRICE====================
labourTotal+=labourTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimationId,labourId:labor.id}});await estimationLibary.update({labourFactorQuantity,labourTotalAmount});}// LOOP THROUGH SUBCONTRACTORS
for(let i=0;i<subContractors.length;i++){const subc=subContractors[i];// formaulas
const appliedPrice=+subc.price;let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:existingCurrencyCode,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const subContractorTotalAmount=finalPrice;// update subcontractor
const sub=await _models.UserSubContractors.findOne({where:{id:subc.id}});await sub.update({price:finalPrice});// ==============MATERIAL TOTAL PRICE====================
subcontractorTotal+=subContractorTotalAmount;const updatesub=await _models.SubContractors.findOne({where:{id:subc.id}});await updatesub.update({quantity:estimationQty});// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimationId,subContractorId:subc.id}});await estimationLibary.update({subContractorTotalAmount});}// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=fuelTotal*wastage;const calculatedTransportTotal=fuelTotal*transport;// material
const materialCostPerWorkItem=fuelTotal+ +calculatedWastageTotal+ +calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/estimationQty;// equipment
const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/estimationQty;// labour
const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/estimationQty;// subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// // calculate subtotal formula ========= Subtotal =========
const calculatedSubtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate material Total ======= Material Total ==========
const materialTotal=fuelTotal+calculatedWastageTotal+calculatedTransportTotal;const newEstimationRate=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+subcontractorCostPerWorkItem;// // calculate profile, overhead and contigency formula
const calculatedOverHead=newEstimationRate*estimationQty*overHead;const tempProfit=newEstimationRate*estimationQty+calculatedOverHead;const calculatedProfit=tempProfit*profit;const tempContigency=newEstimationRate*estimationQty+calculatedProfit;const calculatedContigency=tempContigency*contigency;// calculate estimationRate and estimationTotalAmount formula
const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;// rate per unit formula
const indirectRatePerUnit=indirectCostPerWorkItem/estimationQty;const totalAmount=calculatedSubtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await estimation.update({wastagePercentage:wastage,transportPercentage:transport,profitPercentage:profit,overHeadPercentage:overHead,contigencyPercentage:contigency,equipmentTotal:equipmentTotal.toFixed(2),materialTotal:materialTotal.toFixed(2),wastageTotal:calculatedWastageTotal.toFixed(2),transportTotal:calculatedTransportTotal.toFixed(2),subtotal:calculatedSubtotal.toFixed(2),profitTotal:calculatedProfit.toFixed(2),overHeadTotal:calculatedOverHead.toFixed(2),contigencyTotal:calculatedContigency.toFixed(2),estimationRate:ratePerUnit.toFixed(2),estimationTotalAmount:totalAmount.toFixed(2),estimationQuantity:estimationQty,materialCostPerWorkItem:materialCostPerWorkItem.toFixed(2),materialRatePerUnit:materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:indirectRatePerUnit.toFixed(2),labourCostperWorkItem:labourCostperWorkItem.toFixed(2),labourRatePerUnit:labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:subcontractorCostPerWorkItem.toFixed(2)});}// update project
await template.update({name:editedName,description:editedDescription,status:editedStatus,currencyCode:currencyCode,vat:editedVAT,isApproved:approved});const updateTemplate=await template.reload();return(0,_utils.onSuccess)(res,200,"Successfully updated",updateTemplate);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again",error.message);}}// re-calculate project data after adding estimation
// approved the project
static async approveProject(req,res){try{const{id:userId,role,managerId}=req.user;const project=await _models.Projects.findOne({where:{id:req.params.id,userId:managerId?managerId:userId}});if(role!=="manager")return(0,_utils.onError)(res,401,"You are not allowed to approve or disapprove project");const{isApproved}=project;if(isApproved){await project.update({isApproved:false});return(0,_utils.onSuccess)(res,200,"Project disapproved successfully",project);}else{await project.update({isApproved:true});return(0,_utils.onSuccess)(res,200,"Project Approved successfully",project);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// add project activity by adding caterory
static async addProjectActivity(req,res){const t=await _sequelize.default.transaction();try{const{id:userId,managerId}=req.user;const{projectId}=req.params;const{activityName}=req.body;// find project
const project=await _models.Projects.findOne({where:{id:projectId,userId:managerId?managerId:userId}});if(!project){return(0,_utils.onError)(res,404,"Project not found");}// search category in the default category
const defaultCategory=await _models.EstimationCategory.findOne({where:{name:activityName,isApproved:true},include:[{model:_models.Estimations,as:"activities",include:[{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]}]});// search category in the user category
const userCategory=await _models.UserEstimationCategory.findOne({where:{name:activityName},include:[{model:_models.UserEstimations,as:"activities",include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]}]});// if category not found in the default category and user category return error
if(!defaultCategory&&!userCategory){return(0,_utils.onError)(res,404,"Category not found, please create new one");}if(userCategory){const estimation=await _models.UserEstimations.findAll({where:{userEstimationCategoryId:userCategory.id,userId:managerId?managerId:userId},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// create new userCategory with userId and projectId
const categoryExist=await _models.UserEstimationCategory.findOne({where:{userId:managerId?managerId:userId,projectId,name:userCategory.name,code:userCategory.code}});if(categoryExist){return(0,_utils.onError)(res,409,"Activity already exists, please add estimation to it.");}const category=await _models.UserEstimationCategory.create({userId:managerId?managerId:userId,projectId,name:userCategory.name,code:userCategory.code});// const { activities: userActivities } = userCategory;
// create userEstimation with userId and projectId
for(let i=0;i<estimation.length;i++){const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors}=estimation[i];const newEstimation=await _models.UserEstimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,userEstimationCategoryId:category.id,projectId,userId:managerId?managerId:userId});for(let j=0;j<equipments.length;j++){// Equipments
const{name:equipmentName,unit:equipmentUnit,caveragePerUnit:equipmentCaveragePerUnit,hireRatePrice:equipmentHireRate,number:equipmentNumber,supplierId:equipmentSupplier,UserEstimationLibrary:equiplibrary}=equipments[j];const userEquipment=await _models.UserEquipments.findOne({where:{name,projectId}});if(!userEquipment){const newEquipment=await _models.UserEquipments.create({name:equipmentName,unit:equipmentUnit,caveragePerUnit:equipmentCaveragePerUnit,hireRatePrice:equipmentHireRate,number:equipmentNumber,supplierId:equipmentSupplier,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:equiplibrary?.equipmentPerformance,equipmentTotalAmount:equiplibrary?.equipmentTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:userEquipment.id,equipmentPerformance:equiplibrary?.equipmentPerformance,equipmentTotalAmount:equiplibrary?.equipmentTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}for(let k=0;k<materials.length;k++){// materials
const{name:materialName,quantity:materilQuantity,unit:materialUnit,caveragePerUnit:materialCavergae,price:materialPrice,supplierId:materialSupplier,UserEstimationLibrary:matlibrary}=materials[k];const userMaterial=await _models.UserMaterials.findOne({where:{name,projectId}});if(!userMaterial){const newMaterial=await _models.UserMaterials.create({name:materialName,quantity:materilQuantity,unit:materialUnit,caveragePerUnit:materialCavergae,price:materialPrice,supplierId:materialSupplier,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:matlibrary.materialFactorQuantity,materialTotalAmount:matlibrary.materialTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:userMaterial.id,materialFactorQuantity:matlibrary.materialFactorQuantity,materialTotalAmount:matlibrary.materialTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}for(let l=0;l<labours.length;l++){// labours
const{name:labourName,unit:labourUnit,caveragePerUnit:labourCaverage,number:labourNumber,wages:labourWages,UserEstimationLibrary:labourLibrary}=labours[l];const userLabour=await _models.UserLabours.findOne({where:{name,projectId}});if(!userLabour){const newLabour=await _models.UserLabours.create({name:labourName,unit:labourUnit,caveragePerUnit:labourCaverage,number:labourNumber,wages:labourWages,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:labourLibrary.labourFactorQuantity,labourTotalAmount:labourLibrary.labourTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:userLabour.id,labourFactorQuantity:labourLibrary.labourFactorQuantity,labourTotalAmount:labourLibrary.labourTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}for(let m=0;m<subContractors.length;m++){// subcontractor
const{name:subContractorName,unit:subContractorUnit,quantity:subContractorQuantity,price:subContractorPrice,UserEstimationLibrary:sublibrary}=subContractors[m];const userSubContractor=await _models.UserSubContractors.findOne({where:{name,projectId}});if(!userSubContractor){const newSubContractor=await _models.UserSubContractors.create({name:subContractorName,unit:subContractorUnit,quantity:subContractorQuantity,price:subContractorPrice,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:sublibrary.subContractorTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({subContractorId:userSubContractor.id,subContractorTotalAmount:sublibrary.subContractorTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}}return(0,_utils.onSuccess)(res,200,"Activity added successfully");}// create new userCategory with userId and projectId
const category=await _models.UserEstimationCategory.create({userId:managerId?managerId:userId,projectId,name:defaultCategory.name,code:defaultCategory.code});const estimation=await _models.UserEstimations.findAll({where:{userEstimationCategoryId:defaultCategory.id,userId:managerId?managerId:userId},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});for(let i=0;i<estimation.length;i++){const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors}=estimation[i];const newEstimation=await _models.UserEstimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,userEstimationCategoryId:category.id,projectId,userId:managerId?managerId:userId});for(let j=0;j<equipments.length;j++){// Equipments
const{name:equipmentName,unit:equipmentUnit,caveragePerUnit:equipmentCaveragePerUnit,hireRatePrice:equipmentHireRate,number:equipmentNumber,supplierId:equipmentSupplier,UserEstimationLibrary:equiplibrary}=equipments[j];const userEquipment=await _models.UserEquipments.findOne({where:{name,projectId}});if(!userEquipment){const newEquipment=await _models.UserEquipments.create({name:equipmentName,unit:equipmentUnit,caveragePerUnit:equipmentCaveragePerUnit,hireRatePrice:equipmentHireRate,number:equipmentNumber,supplierId:equipmentSupplier,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:equiplibrary.equipmentPerformance,equipmentTotalAmount:equiplibrary.equipmentTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:userEquipment.id,equipmentPerformance:equiplibrary.equipmentPerformance,equipmentTotalAmount:equiplibrary.equipmentTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}for(let k=0;k<materials.length;k++){// materials
const{name:materialName,quantity:materilQuantity,unit:materialUnit,caveragePerUnit:materialCavergae,price:materialPrice,supplierId:materialSupplier,UserEstimationLibrary:matlibrary}=materials[k];const userMaterial=await _models.UserMaterials.findOne({where:{name,projectId}});if(!userMaterial){const newMaterial=await _models.UserMaterials.create({name:materialName,quantity:materilQuantity,unit:materialUnit,caveragePerUnit:materialCavergae,price:materialPrice,supplierId:materialSupplier,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:matlibrary.materialFactorQuantity,materialTotalAmount:matlibrary.materialTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:userMaterial.id,materialFactorQuantity:matlibrary.materialFactorQuantity,materialTotalAmount:matlibrary.materialTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}for(let l=0;l<labours.length;l++){// labours
const{name:labourName,unit:labourUnit,caveragePerUnit:labourCaverage,number:labourNumber,wages:labourWages,UserEstimationLibrary:labourLibrary}=labours[l];const userLabour=await _models.UserLabours.findOne({where:{name,projectId}});if(!userLabour){const newLabour=await _models.UserLabours.create({name:labourName,unit:labourUnit,caveragePerUnit:labourCaverage,number:labourNumber,wages:labourWages,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:labourLibrary.labourFactorQuantity,labourTotalAmount:labourLibrary.labourTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:userLabour.id,labourFactorQuantity:labourLibrary.labourFactorQuantity,labourTotalAmount:labourLibrary.labourTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}for(let m=0;m<subContractors.length;m++){// subcontractor
const{name:subContractorName,unit:subContractorUnit,quantity:subContractorQuantity,price:subContractorPrice,UserEstimationLibrary:sublibrary}=subContractors[m];const userSubContractor=await _models.UserSubContractors.findOne({where:{name,projectId}});if(!userSubContractor){const newSubContractor=await _models.UserSubContractors.create({name:subContractorName,unit:subContractorUnit,quantity:subContractorQuantity,price:subContractorPrice,userId:managerId?managerId:userId,projectId});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:sublibrary.subContractorTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({subContractorId:userSubContractor.id,subContractorTotalAmount:sublibrary.subContractorTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId});}}}return(0,_utils.onSuccess)(res,200,"Activity added successfully");}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// remove activity Source project
static async removeActivityFromProject(req,res){try{const{id:userId,managerId}=req.user;const{projectId}=req.params;const{activityName}=req.body;const project=await _models.Projects.findOne({where:{id:projectId,userId:managerId?managerId:userId}});if(!project){return(0,_utils.onError)(res,404,"Project not found");}const estimations=await _models.UserEstimations.findAll({where:{userId:managerId?managerId:userId,projectId},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const projectData={...project.dataValues,activities:estimations};const{activities}=projectData;// loop through workSpecification and delete category, activities and UserEstimationCategory
for(let j=0;j<activities.length;j++){const{category:{name},id:estimationId,userEstimationCategoryId}=activities[j];// delete all
if(name===activityName){await _models.UserEstimationLibrary.destroy({where:{estimationId}});await _models.UserEstimations.destroy({where:{id:estimationId}});await _models.UserEstimationCategory.destroy({where:{id:userEstimationCategoryId}});}}return(0,_utils.onSuccess)(res,200,"Activity removed successfully",projectData);}catch(error){console.log("error",error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}static async getProjectEstimationById(req,res){try{const{id:userId,role,managerId}=req.user;if(role==="manager"||role==="admin"){const estimation=await _models.UserEstimations.findOne({where:{userId:managerId?managerId:userId,projectId:req.params.projectId,id:req.params.id},include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}},{model:_models.UserEstimationsConsumption,as:"estimation_consumed",include:[{model:_models.UserEquipmentConsumption,as:"consumed_equipment",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserEquipments,as:"consumed_equipment",attributes:["name","unit"]}]},{model:_models.UserLabourConsumption,as:"consumed_labour",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserLabours,as:"consumed_labour",attributes:["name","unit"]}]},{model:_models.UserMaterialConsumption,as:"consumed_material",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserMaterials,as:"consumed_material",attributes:["name","unit"]}]},{model:_models.UserSubcontractorConsumption,as:"consumed_subcontractor",attributes:["name","unit","consumedQuantity","consumedPrice","consumedDate","consumedTotal","percentage"],include:[{model:_models.UserSubContractors,as:"consumed_subcontractor",attributes:["name","unit"]}]}]}]});if(!estimation)return(0,_utils.onError)(res,400,"Estimation does not exist within this project");return(0,_utils.onSuccess)(res,200,"Estimation returned successfully",estimation);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{templateId:req.params.projectId,id:req.params.id},include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.EstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation)return(0,_utils.onError)(res,404,"Estimation does not exist");return(0,_utils.onSuccess)(res,200,"Estimation returned successfully",estimation);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// add estimation to project from category
static async addEstimationToProject(req,res){const t=await _sequelize.default.transaction();try{const{estimationName}=req.body;const{id:userId,managerId,role}=req.user;const{projectId}=req.params;// default estimation
if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id:projectId,userId:managerId?managerId:userId}});if(!project){return(0,_utils.onError)(res,404,"Project not found");}const currencyCode=project?.currencyCode;const defaultEstimation=await _models.Estimations.findOne({where:{name:estimationName,isApproved:true},include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.EstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const userEstimation=await _models.UserEstimations.findOne({where:{name:estimationName,userId:managerId?managerId:userId,projectId:null},include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!defaultEstimation&&!userEstimation){return(0,_utils.onError)(res,404,"Estimation not found");}const estimations=await _models.UserEstimations.findAll({where:{userId:managerId?managerId:userId,projectId},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// estimation already exist with project estimation
const estimationExists=estimations.find(estimation=>{return estimation.name===estimationName;});if(estimationExists){return(0,_utils.onError)(res,409,"Estimation already exists");}if(userEstimation){// create new estimation with project id
const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors,category}=userEstimation;const subcategory=category?.subcategory;const estimationExistCategory=await _models.UserEstimationCategory.findOne({where:{name:category?.name,userId:managerId?managerId:userId,projectId}});let categoryId;if(!estimationExistCategory){const created=await _models.UserEstimationCategory.create({name:category?.name,userId:managerId?managerId:userId,projectId,code:category?.code});categoryId=created.id;}else{categoryId=estimationExistCategory.id;}for(let sub of subcategory){await _models.UserEstimationSubcategory.create({name:sub.name,code:sub.name,mainCategoryId:categoryId});}const newEstimation=await _models.UserEstimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId:categoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,projectId,userId:managerId?managerId:userId},{transaction:t});// LOOP THROUGH Equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,currency,UserEstimationLibrary:library}=equipments[i];const userEquipment=await _models.UserEquipments.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userEquipment){// create new equipment
let currencyConverter;if(+hireRatePrice>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+hireRatePrice});}const response=await currencyConverter?.convert();const finalPrice=response;const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,hireRatePrice:finalPrice,number,supplierId,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.equipmentTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.equipmentTotalAmount});}const newResponse=await newAmount?.convert();// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// create new UserEstimationLibary
let newAmount;if(+library?.equipmentTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.equipmentTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({equipmentId:userEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,UserEstimationLibrary:library,currency}=materials[i];const userMaterial=await _models.UserMaterials.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userMaterial){let currencyConverter;if(+price>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+price});}const response=await currencyConverter?.convert();// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,price:response,supplierId,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.materialTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.materialTotalAmount});}const newResponse=await newAmount?.convert();// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// CREATE UserEstimationLibary
let newAmount;if(+library?.materialTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.materialTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({materialId:userMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,UserEstimationLibrary:library,currency}=labours[i];const userLabour=await _models.UserLabours.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userLabour){let currencyConverter;if(+wages>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+wages});}const response=await currencyConverter?.convert();const newLabour=await _models.UserLabours.create({name,number,unit,wages:response?response:0,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.labourTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.labourTotalAmount});}const newResponse=await newAmount?.convert();// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// CREATE UserEstimationLibary
let newAmount;if(+library?.labourTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.labourTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({labourId:userLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,UserEstimationLibrary:library,currency}=subContractors[i];const userSubContractor=await _models.UserSubContractors.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userSubContractor){let currencyConverter;if(+price>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+price});}const response=await currencyConverter?.convert();const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price:response,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.subContractorTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.subContractorTotalAmount});}const newResponse=await newAmount?.convert();await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// CREATE UserEstimationLibary
let newAmount;if(+library?.subContractorTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.subContractorTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({subContractorId:userSubContractor.id,subContractorTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}await t.commit();const addEstima=await _models.UserEstimations.findOne({where:{id:newEstimation.id},include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name",'id','code'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["id","name","code",'mainCategoryId']}]}]});return(0,_utils.onSuccess)(res,200,"Estimation Added Successfully",addEstima);}else{// create new estimation with project id
const{name:activityName,category,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,estimationCategoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors}=defaultEstimation;let wastageTotalConvert;let transportTotalConvert;let profitTotalConvert;let overHeadTotalConvert;let contigencyTotalConvert;let subtotalConvert;let estimationRateConvert;let estimationTotalAmountConvert;let equipmentCostPerWorkItemConvert;let equipmentRatePerUnitConvert;let materialCostPerWorkItemConvert;let materialRatePerUnitConvert;let indirectCostPerWorkItemConvert;let indirectRatePerUnitConvert;let labourCostperWorkItemConvert;let labourRatePerUnitConvert;let subcontractorCostPerWorkItemConvert;if(+wastageTotal>0){wastageTotalConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+wastageTotal});}const wastageResponse=await wastageTotalConvert?.convert();if(+transportTotal>0){transportTotalConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+transportTotal});}const transportResponse=await transportTotalConvert?.convert();if(+profitTotal>0){profitTotalConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+profitTotal});}const profitResponse=await profitTotalConvert?.convert();if(+overHeadTotal>0){overHeadTotalConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+overHeadTotal});}const overheadResponse=await overHeadTotalConvert?.convert();if(+contigencyTotal>0){contigencyTotalConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+contigencyTotal});}const contigencyResponse=await contigencyTotalConvert?.convert();if(+subtotal>0){subtotalConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+subtotal});}const subtotalResponse=await subtotalConvert?.convert();if(+estimationRate>0){estimationRateConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+estimationRate});}const estimationRateResponse=await estimationRateConvert?.convert();if(+estimationTotalAmount>0){estimationTotalAmountConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+estimationTotalAmount});}const estimationTotalAmountResponse=await estimationTotalAmountConvert?.convert();if(+equipmentCostPerWorkItem>0){equipmentCostPerWorkItemConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+equipmentCostPerWorkItem});}const equipmentCostPerWorkItemConvertResponse=await equipmentCostPerWorkItemConvert?.convert();if(+equipmentRatePerUnit>0){equipmentRatePerUnitConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+equipmentRatePerUnit});}const equipmentRatePerUnitConvertResponse=await equipmentRatePerUnitConvert?.convert();// material
if(+materialCostPerWorkItem>0){materialCostPerWorkItemConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+materialCostPerWorkItem});}const materialCostPerWorkItemConvertResponse=await materialCostPerWorkItemConvert?.convert();if(+materialRatePerUnit>0){materialRatePerUnitConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+materialRatePerUnit});}const materialRatePerUnitConvertResponse=await materialRatePerUnitConvert?.convert();// indirect cost item
if(+indirectCostPerWorkItem>0){indirectCostPerWorkItemConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+indirectCostPerWorkItem});}const indirectCostPerWorkItemConvertResponse=await indirectCostPerWorkItemConvert?.convert();if(+indirectRatePerUnit>0){indirectRatePerUnitConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+indirectRatePerUnit});}const indirectRatePerUnitConvertResponse=await indirectRatePerUnitConvert?.convert();// labour
if(+labourCostperWorkItem>0){labourCostperWorkItemConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+labourCostperWorkItem});}const labourCostperWorkItemConvertResponse=await labourCostperWorkItemConvert?.convert();if(+labourRatePerUnit>0){labourRatePerUnitConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+labourRatePerUnit});}const labourRatePerUnitConvertResponse=await labourRatePerUnitConvert?.convert();// subcontractor
if(+subcontractorCostPerWorkItem>0){subcontractorCostPerWorkItemConvert=new _currencyConverterLt.default({from:"RWF",to:currencyCode,amount:+subcontractorCostPerWorkItem});}const subcontractorCostPerWorkItemConvertResponse=await subcontractorCostPerWorkItemConvert?.convert();// estimation category exist
const subcategory=category?.subcategory;const estimationExistCategory=await _models.UserEstimationCategory.findOne({where:{name:category?.name,userId:managerId?managerId:userId,projectId}});let categoryId;if(!estimationExistCategory){const created=await _models.UserEstimationCategory.create({name:category?.name,userId:managerId?managerId:userId,projectId,code:category?.code});categoryId=created.id;}else{categoryId=estimationExistCategory.id;}for(let sub of subcategory){await _models.UserEstimationSubcategory.create({name:sub.name,code:sub.name,mainCategoryId:categoryId});}const newEstimation=await _models.UserEstimations.create({name:activityName,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal:wastageResponse,transportPercentage,transportTotal:transportResponse,profitPercentage,profitTotal:profitResponse,overHeadPercentage,overHeadTotal:overheadResponse,contigencyPercentage,contigencyTotal:contigencyResponse,subtotal:subtotalResponse,estimationRate:estimationRateResponse,estimationTotalAmount:estimationTotalAmountResponse,userEstimationCategoryId:categoryId,equipmentCostPerWorkItem:equipmentCostPerWorkItemConvertResponse,equipmentRatePerUnit:equipmentRatePerUnitConvertResponse,materialCostPerWorkItem:materialCostPerWorkItemConvertResponse,materialRatePerUnit:materialRatePerUnitConvertResponse,indirectCostPerWorkItem:indirectCostPerWorkItemConvertResponse,indirectRatePerUnit:indirectRatePerUnitConvertResponse,labourCostperWorkItem:labourCostperWorkItemConvertResponse,labourRatePerUnit:labourRatePerUnitConvertResponse,subcontractorCostPerWorkItem:subcontractorCostPerWorkItemConvertResponse,projectId,userId:managerId?managerId:userId},{transaction:t});// LOOP THROUGH Equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,currency,UserEstimationLibrary:library}=equipments[i];const userEquipment=await _models.UserEquipments.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userEquipment){// create new equipment
let currencyConverter;if(+hireRatePrice>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+hireRatePrice});}const response=await currencyConverter?.convert();const finalPrice=response;const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,hireRatePrice:finalPrice,number,supplierId,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.equipmentTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.equipmentTotalAmount});}const newResponse=await newAmount?.convert();// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// create new UserEstimationLibary
let newAmount;if(+library?.equipmentTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.equipmentTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({equipmentId:userEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,UserEstimationLibrary:library,currency}=materials[i];const userMaterial=await _models.UserMaterials.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userMaterial){let currencyConverter;if(+price>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+price});}const response=await currencyConverter?.convert();// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,price:response,supplierId,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.materialTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.materialTotalAmount});}const newResponse=await newAmount?.convert();// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// CREATE UserEstimationLibary
let newAmount;if(+library?.materialTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.materialTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({materialId:userMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,UserEstimationLibrary:library,currency}=labours[i];const userLabour=await _models.UserLabours.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userLabour){let currencyConverter;if(+wages>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+wages});}const response=await currencyConverter?.convert();const newLabour=await _models.UserLabours.create({name,number,unit,wages:response?response:0,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.labourTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.labourTotalAmount});}const newResponse=await newAmount?.convert();// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// CREATE UserEstimationLibary
let newAmount;if(+library?.labourTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.labourTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({labourId:userLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,UserEstimationLibrary:library,currency}=subContractors[i];const userSubContractor=await _models.UserSubContractors.findOne({where:{name,projectId}});const code=currency?currency:"RWF";if(!userSubContractor){let currencyConverter;if(+price>0){currencyConverter=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+price});}const response=await currencyConverter?.convert();const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price:response,userId:managerId?managerId:userId,projectId,currency:code},{transaction:t});let newAmount;if(+library?.subContractorTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.subContractorTotalAmount});}const newResponse=await newAmount?.convert();await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}else{// CREATE UserEstimationLibary
let newAmount;if(+library?.subContractorTotalAmount>0){newAmount=new _currencyConverterLt.default({from:code,to:currencyCode,amount:+library.subContractorTotalAmount});}const newResponse=await newAmount?.convert();await _models.UserEstimationLibrary.create({subContractorId:userSubContractor.id,subContractorTotalAmount:newResponse?newResponse:0,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId},{transaction:t});}}await t.commit();const addEstima=await _models.UserEstimations.findOne({where:{id:newEstimation.id},include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name",'id','code'],include:[{model:_models.UserEstimationSubcategory,as:"subcategory",attributes:["id","name","code",'mainCategoryId']}]}]});return(0,_utils.onSuccess)(res,200,"Estimation Added Successfully",addEstima);}}if(role==="owner"){const template=await _models.Templates.findOne({where:{id:projectId}});if(!template){return(0,_utils.onError)(res,404,"template not found");}const defaultEstimation=await _models.Estimations.findOne({where:{name:estimationName,templateId:null},include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.EstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!defaultEstimation){return(0,_utils.onError)(res,404,"Estimation not found");}const estimations=await _models.Estimations.findAll({where:{templateId:projectId},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id'],include:[{model:_models.EstimationSubcategory,as:"subcategory",attributes:["name","code",'id','mainCategoryId']}]},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// estimation already exist with project estimation
const estimationExists=estimations.find(estimation=>{return estimation.name===estimationName;});if(estimationExists){return(0,_utils.onError)(res,409,"Estimation already added");}// create new estimation with project id
const{name:activityName,category,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors}=defaultEstimation;// estimation category exist
const subcategory=category?.subcategory;const estimationExistCategory=await _models.EstimationCategory.findOne({where:{name:category?.name,templateId:projectId}});let categoryId;if(!estimationExistCategory){const created=await _models.EstimationCategory.create({name:category?.name,templateId:projectId,code:category?.name});categoryId=created.id;}else{categoryId=estimationExistCategory.id;}for(let sub of subcategory){await _models.EstimationSubcategory.create({name:sub.name,code:sub.name,mainCategoryId:categoryId});}const newEstimation=await _models.Estimations.create({name:activityName,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,estimationCategoryId:categoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,templateId:projectId},{transaction:t});// LOOP THROUGH Equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,EstimationLibrary:library}=equipments[i];const userEquipment=await _models.Equipments.findOne({where:{name,templateId:projectId}});if(!userEquipment){// create new equipment
const newEquipment=await _models.Equipments.create({name,unit,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,hireRatePrice,number,supplierId,templateId:projectId},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:library?.equipmentTotalAmount?library?.equipmentTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}else{// create new UserEstimationLibary
await _models.EstimationLibrary.create({equipmentId:userEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:library?.equipmentTotalAmount?library?.equipmentTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,EstimationLibrary:library}=materials[i];const userMaterial=await _models.Materials.findOne({where:{name,templateId:projectId}});if(!userMaterial){// create new material
const newMaterial=await _models.Materials.create({name,quantity,unit,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,price,supplierId,templateId:projectId},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:library?.materialTotalAmount?library?.materialTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}else{// CREATE UserEstimationLibary
await _models.EstimationLibrary.create({materialId:userMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:library?.materialTotalAmount?library?.materialTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,EstimationLibrary:library}=labours[i];const userLabour=await _models.Labours.findOne({where:{name,templateId:projectId}});if(!userLabour){const newLabour=await _models.Labours.create({name,number,unit,wages,caveragePerUnit:caveragePerUnit?caveragePerUnit:0,templateId:projectId},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:library?.labourTotalAmount?library?.labourTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}else{// CREATE UserEstimationLibary
await _models.EstimationLibrary.create({labourId:userLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:library?.labourTotalAmount?library?.labourTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,EstimationLibrary:library}=subContractors[i];const userSubContractor=await _models.SubContractors.findOne({where:{name,templateId:projectId}});if(!userSubContractor){const newSubContractor=await _models.SubContractors.create({name,unit,quantity,price,templateId:projectId},{transaction:t});await await _models.EstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:library?.subContractorTotalAmount?library?.subContractorTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}else{// CREATE UserEstimationLibary
await _models.UserEstimationLibrary.create({subContractorId:userSubContractor.id,subContractorTotalAmount:library?.subContractorTotalAmount?library?.subContractorTotalAmount:0,estimationId:newEstimation.id,templateId:projectId},{transaction:t});}}await t.commit();const addEstima=await _models.Estimations.findOne({where:{id:newEstimation.id},include:[{model:_models.EstimationCategory,as:"category",attributes:["name",'id','code'],include:[{model:_models.EstimationSubcategory,as:"subcategory",attributes:["id","name","code",'mainCategoryId']}]}]});return(0,_utils.onSuccess)(res,200,"Estimation Added Successfully",addEstima);}}catch(error){await t.rollback();return(0,_utils.onError)(res,500,"something went wrong, try again",error.message);}}// remove estimation Source project
static async removeEstimationFromProject(req,res){try{const{estimationName}=req.body;const{id:userId,managerId,role}=req.user;const{projectId}=req.params;// default estimation
if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id:projectId,userId:managerId?managerId:userId}});if(!project){return(0,_utils.onError)(res,404,"Project not found");}const estimations=await _models.UserEstimations.findAll({where:{userId:managerId?managerId:userId,projectId},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// estimation already exist with project estimation
const estimationExists=estimations.find(estimation=>{return estimation.name===estimationName;});if(!estimationExists){return(0,_utils.onError)(res,409,"Estimation Doesn't Exist within this project");}// remove estimation Source project
await _models.UserEstimations.destroy({where:{id:estimationExists.id}});// remove UserEstimationLibrary with estimationId
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimationExists.id}});const updated=await project.reload();return(0,_utils.onSuccess)(res,200,"Estimation Removed Successfully",updated);}if(role==="owner"){const project=await _models.Templates.findOne({where:{id:projectId}});if(!project){return(0,_utils.onError)(res,404,"Project not found");}const estimations=await _models.Estimations.findAll({where:{templateId:projectId},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// estimation already exist with project estimation
const estimationExists=estimations.find(estimation=>{return estimation.name===estimationName;});if(!estimationExists){return(0,_utils.onError)(res,409,"Estimation Doesn't Exist");}// remove estimation Source project
await _models.Estimations.destroy({where:{id:estimationExists.id}});// remove UserEstimationLibrary with estimationId
await _models.EstimationLibrary.destroy({where:{estimationId:estimationExists.id}});const updated=await project.reload();return(0,_utils.onSuccess)(res,200,"Estimation Removed Successfully",updated);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// copy the existing project and create new one
static async copyProjectData(req,res){const t=await _sequelize.default.transaction();try{const{id:userId,managerId,role}=req.user;const{id}=req.params;if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id,userId:managerId?managerId:userId}});const estimations=await _models.UserEstimations.findAll({where:{userId:managerId?managerId:userId,projectId:req.params.id},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// dupliacte project and if name already exist increment by one;
let projectName=project.name;const projectExists=await _models.Projects.findOne({where:{name:project.name}});if(projectExists){projectName=`${project.name} copy`;}const newProject=await _models.Projects.create({name:projectName,description:project?.description,client:project?.client,contractor:project?.contractor,consultant:project?.consultant,startDate:project?.startDate,endData:project?.endDate,status:project?.status,outputAndPrice:project?.outputAndPrice,userId:project?.userId,adminId:project?.adminId},{transaction:t});for(let estimation of estimations){const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors,category:{name:categoryName,code}}=estimation;const created=await _models.UserEstimationCategory.create({name:categoryName,userId:newProject.userId,projectId:newProject.id,code});const categoryId=created.id;const newEstimation=await _models.UserEstimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId:categoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,UserEstimationLibrary:{equipmentPerformance,equipmentTotalAmount}}=equipments[i];const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance,equipmentTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,UserEstimationLibrary:{materialFactorQuantity,materialTotalAmount}}=materials[i];// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit,price,supplierId,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity,materialTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,UserEstimationLibrary:{labourFactorQuantity,labourTotalAmount}}=labours[i];const newLabour=await _models.UserLabours.create({name,number,unit,wages,caveragePerUnit,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity,labourTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,UserEstimationLibrary:{subContractorTotalAmount}}=subContractors[i];const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount,estimationId:newEstimation.id,userId:managerId?managerId:userId,projectId:newProject.id},{transaction:t});}}await t.commit();return(0,_utils.onSuccess)(res,200,"Project copied successfully",newProject);}if(role==="owner"){const project=await _models.Templates.findOne({where:{id}});const estimations=await _models.Estimations.findAll({where:{templateId:req.params.id},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// dupliacte project and if name already exist increment by one;
let projectName=project.name;const projectExists=await _models.Templates.findOne({where:{name:project.name}});if(projectExists){projectName=`${project.name} copy`;}const newProject=await _models.Templates.create({name:projectName,description:project?.description,status:project?.status,category:project?.category,vat:project?.vat,currencyCode:project?.currencyCode,currencyValue:project?.currencyValue},{transaction:t});for(let estimation of estimations){const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors,category:{name:categoryName,code}}=estimation;const created=await _models.EstimationCategory.create({name:categoryName,templateId:newProject.id,code});const categoryId=created.id;const newEstimation=await _models.Estimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,estimationCategoryId:categoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,templateId:newProject.id},{transaction:t});// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,EstimationLibrary:{equipmentPerformance,equipmentTotalAmount}}=equipments[i];const newEquipment=await _models.Equipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,templateId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance,equipmentTotalAmount,estimationId:newEstimation.id,templateId:newProject.id},{transaction:t});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,EstimationLibrary:{materialFactorQuantity,materialTotalAmount}}=materials[i];// create new material
const newMaterial=await _models.Materials.create({name,quantity,unit,caveragePerUnit,price,supplierId,templateId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity,materialTotalAmount,estimationId:newEstimation.id,templateId:newProject.id},{transaction:t});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,EstimationLibrary:{labourFactorQuantity,labourTotalAmount}}=labours[i];const newLabour=await _models.Labours.create({name,number,unit,wages,caveragePerUnit,templateId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity,labourTotalAmount,estimationId:newEstimation.id,templateId:newProject.id},{transaction:t});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,EstimationLibrary:{subContractorTotalAmount}}=subContractors[i];const newSubContractor=await _models.SubContractors.create({name,unit,quantity,price,templateId:newProject.id},{transaction:t});await await _models.EstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount,estimationId:newEstimation.id,templateId:newProject.id},{transaction:t});}}await t.commit();return(0,_utils.onSuccess)(res,200,"Copied successfully",newProject);}}catch(error){await t.rollback();return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// copy estimation from one project to another;
static async copyEstimationFromProjectToAnother(req,res){const t=await _sequelize.default.transaction();try{const{id:userId,managerId,role}=req.user;const{fromProjectId,toProjectId,destinationCategoryId}=req.body;const{id}=req.params;if(role==='manager'||role==='admin'){const fromProject=await _models.Projects.findOne({where:{id:fromProjectId}});const toProject=await _models.Projects.findOne({where:{id:toProjectId}});if(!fromProject){return(0,_utils.onError)(res,404,"Source project not found");}if(!toProject){return(0,_utils.onError)(res,404,"Destination project not found");}const category=await _models.UserEstimationCategory.findOne({where:{id:destinationCategoryId,userId:managerId?managerId:userId,projectId:toProjectId}});if(!category){return(0,_utils.onError)(res,404,'destination category not found');}const estimation=await _models.UserEstimations.findOne({where:{userId:managerId?managerId:userId,id,projectId:fromProjectId},order:[["id","ASC"]],include:[{model:_models.UserEstimationCategory,as:"category",attributes:["name",'code','id']},{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation)return res,404,"Estimation doesn't exist!";const estimationName=`${estimation.name} copy`;const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors}=estimation;const newEstimation=await _models.UserEstimations.create({name:estimationName,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId:category.id,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,userId:managerId?managerId:userId,projectId:toProjectId},{transaction:t});// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,UserEstimationLibrary:library}=equipments[i];const currency=equipments[i]?.currency;const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,userId:managerId?managerId:userId,projectId:toProjectId,currency},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:library?.equipmentTotalAmount?library?.equipmentTotalAmount:0,estimationId:newEstimation.id,userId:managerId?managerId:userId},{transaction:t});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,UserEstimationLibrary:library}=materials[i];const currency=materials[i]?.currency;// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit,price,supplierId,userId:managerId?managerId:userId,projectId:toProjectId,currency},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:library?.materialTotalAmount?library?.materialTotalAmount:0,estimationId:newEstimation.id,userId:managerId?managerId:userId},{transaction:t});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,UserEstimationLibrary:library}=labours[i];const currency=labours[i]?.currency;const newLabour=await _models.UserLabours.create({name,number,unit,wages,caveragePerUnit,userId:managerId?managerId:userId,projectId:toProjectId,currency},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:library?.labourTotalAmount?library?.labourTotalAmount:0,estimationId:newEstimation.id,userId:managerId?managerId:userId},{transaction:t});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,UserEstimationLibrary:library}=subContractors[i];const currency=subContractors[i]?.currency;const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price,userId:managerId?managerId:userId,projectId:toProjectId,currency},{transaction:t});await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:library?.subContractorTotalAmount?library?.subContractorTotalAmount:0,estimationId:newEstimation.id,userId:managerId?managerId:userId},{transaction:t});}await t.commit();return(0,_utils.onSuccess)(res,200,"Estimation copied successfully",newEstimation);}if(role==='owner'){const fromProject=await _models.Templates.findOne({where:{id:fromProjectId}});const toProject=await _models.Templates.findOne({where:{id:toProjectId}});if(!fromProject){return(0,_utils.onError)(res,404,"Source template not found");}if(!toProject){return(0,_utils.onError)(res,404,"Destination template not found");}const category=await _models.EstimationCategory.findOne({where:{id:destinationCategoryId,templateId:toProjectId}});if(!category){return(0,_utils.onError)(res,404,'destination category not found');}const estimation=await _models.Estimations.findOne({where:{id,templateId:fromProjectId},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name",'code','id']},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation)return res,404,"Estimation doesn't exist!";const estimationName=`${estimation.name} copy`;const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors}=estimation;const newEstimation=await _models.Estimations.create({name:estimationName,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,estimationCategoryId:category?.id,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,templateId:toProjectId},{transaction:t});// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,EstimationLibrary:library}=equipments[i];const currency=equipments[i]?.currency;const newEquipment=await _models.Equipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,templateId:toProjectId,currency},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:library?.equipmentTotalAmount?library?.equipmentTotalAmount:0,estimationId:newEstimation.id},{transaction:t});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,EstimationLibrary:library}=materials[i];const currency=materials[i]?.currency;// create new material
const newMaterial=await _models.Materials.create({name,quantity,unit,caveragePerUnit,price,supplierId,templateId:toProjectId,currency},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:library?.materialTotalAmount?library?.materialTotalAmount:0,estimationId:newEstimation.id},{transaction:t});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,EstimationLibrary:library}=labours[i];const currency=labours[i]?.currency;const newLabour=await _models.Labours.create({name,number,unit,wages,caveragePerUnit,templateId:toProjectId,currency},{transaction:t});// create new UserEstimationLibary
await _models.EstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:library?.labourTotalAmount?library?.labourTotalAmount:0,estimationId:newEstimation.id},{transaction:t});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,EstimationLibrary:library}=subContractors[i];const currency=subContractors[i]?.currency;const newSubContractor=await _models.SubContractors.create({name,unit,quantity,price,templateId:toProjectId,currency},{transaction:t});await await _models.EstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:library?.subContractorTotalAmount?library?.subContractorTotalAmount:0,estimationId:newEstimation.id},{transaction:t});}await t.commit();return(0,_utils.onSuccess)(res,200,"Estimation copied successfully",newEstimation);}}catch(error){await t.rollback();return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// create a project from template
static async createProjectFromTemplate(req,res){const t=await _sequelize.default.transaction();try{const{id:userId,managerId,role}=req.user;const{id}=req.params;const project=await _models.Templates.findOne({where:{id}});if(!project){return(0,_utils.onError)(res,404,"Template not found");}const estimations=await _models.Estimations.findAll({where:{templateId:req.params.id},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});// dupliacte project and if name already exist increment by one;
let projectName=project.name;const projectExists=await _models.Projects.findOne({where:{name:project.name}});if(projectExists){projectName=`${project.name} copy`;}if(role==="admin"){const newProject=await _models.Projects.create({name:projectName,description:project?.description,status:project?.status,vat:project?.vat,currencyCode:project?.currencyCode,currencyValue:project?.currencyValue,userId:managerId,adminId:userId},{transaction:t});for(let estimation of estimations){const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors,category:{name:categoryName,code}}=estimation;const created=await _models.UserEstimationCategory.create({name:categoryName,userId:newProject.userId,projectId:newProject.id,code});const categoryId=created.id;const newEstimation=await _models.UserEstimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId:categoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,userId:managerId,projectId:newProject.id},{transaction:t});// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,EstimationLibrary:{equipmentPerformance,equipmentTotalAmount}}=equipments[i];const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,userId:managerId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance,equipmentTotalAmount,estimationId:newEstimation.id,userId:managerId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,EstimationLibrary:{materialFactorQuantity,materialTotalAmount}}=materials[i];// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit,price,supplierId,userId:managerId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity,materialTotalAmount,estimationId:newEstimation.id,userId:managerId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,EstimationLibrary:{labourFactorQuantity,labourTotalAmount}}=labours[i];const newLabour=await _models.UserLabours.create({name,number,unit,wages,caveragePerUnit,userId:managerId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity,labourTotalAmount,estimationId:newEstimation.id,userId:managerId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,EstimationLibrary:{subContractorTotalAmount}}=subContractors[i];const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price,userId:managerId,projectId:newProject.id},{transaction:t});await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount,estimationId:newEstimation.id,userId:managerId,projectId:newProject.id},{transaction:t});}}await t.commit();return(0,_utils.onSuccess)(res,200,"Project created successfully",newProject);}if(role==="manager"){const newProject=await _models.Projects.create({name:projectName,description:project?.description,status:project?.status,vat:project?.vat,currencyCode:project?.currencyCode,currencyValue:project?.currencyValue,userId:userId},{transaction:t});for(let estimation of estimations){const{name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,equipments,materials,labours,subContractors,category:{name:categoryName,code}}=estimation;const created=await _models.UserEstimationCategory.create({name:categoryName,userId:newProject.userId,projectId:newProject.id,code});const categoryId=created.id;const newEstimation=await _models.UserEstimations.create({name,estimationUnit,estimationQuantity,wastagePercentage,wastageTotal,transportPercentage,transportTotal,profitPercentage,profitTotal,overHeadPercentage,overHeadTotal,contigencyPercentage,contigencyTotal,subtotal,estimationRate,estimationTotalAmount,userEstimationCategoryId:categoryId,equipmentCostPerWorkItem,equipmentRatePerUnit,materialCostPerWorkItem,materialRatePerUnit,indirectCostPerWorkItem,indirectRatePerUnit,labourCostperWorkItem,labourRatePerUnit,subcontractorCostPerWorkItem,userId:userId,projectId:newProject.id},{transaction:t});// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,EstimationLibrary:{equipmentPerformance,equipmentTotalAmount}}=equipments[i];const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,userId:userId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance,equipmentTotalAmount,estimationId:newEstimation.id,userId:userId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,EstimationLibrary:{materialFactorQuantity,materialTotalAmount}}=materials[i];// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit,price,supplierId,userId:userId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity,materialTotalAmount,estimationId:newEstimation.id,userId:userId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,EstimationLibrary:{labourFactorQuantity,labourTotalAmount}}=labours[i];const newLabour=await _models.UserLabours.create({name,number,unit,wages,caveragePerUnit,userId:userId,projectId:newProject.id},{transaction:t});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity,labourTotalAmount,estimationId:newEstimation.id,userId:userId,projectId:newProject.id},{transaction:t});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,EstimationLibrary:{subContractorTotalAmount}}=subContractors[i];const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price,userId:userId,projectId:newProject.id},{transaction:t});await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount,estimationId:newEstimation.id,userId:userId,projectId:newProject.id},{transaction:t});}}await t.commit();return(0,_utils.onSuccess)(res,200,"Project created successfully",newProject);}}catch(error){await t.rollback();return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// update estimation
static async updateEstimation(req,res){try{const{wastagePercentage,transportPercentage,profitPercentage,overHeadPercentage,contigencyPercentage,estimationQuantity,editName,editedEstimationRate}=req.body;// estimation
const{id:userId,managerId,role}=req.user;const{projectId,id}=req.params;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{equipments,materials,labours,subContractors}=estimation;// use default percemyage or working hours when user dont not input
const estimationQty=+estimationQuantity===0?0:+estimationQuantity>0?+estimationQuantity:+estimation?.estimationQuantity;const wastage=wastagePercentage===0?0:+wastagePercentage>0?+wastagePercentage*0.01:+estimation?.wastagePercentage;const transport=transportPercentage===0?0:transportPercentage>0?transportPercentage*0.01:+estimation?.transportPercentage;const profit=profitPercentage===0?0:+profitPercentage>0?+profitPercentage*0.01:+estimation?.profitPercentage;const overHead=overHeadPercentage===0?0:+overHeadPercentage>0?+overHeadPercentage*0.01:+estimation?.overHeadPercentage;const contigency=contigencyPercentage===0?0:+contigencyPercentage>0?+contigencyPercentage*0.01:+estimation?.contigencyPercentage;const editedName=editName?editName:estimation.name;const editedRate=editedEstimationRate?editedEstimationRate:+estimation.estimationRate;// edited rate
if(editedEstimationRate||editedEstimationRate&&estimationQuantity){for(let i=0;i<equipments.length;i++){const equipment=equipments[i];// delete calculation
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,equipmentId:equipment.id}});// delete equipments
await _models.UserEquipments.destroy({where:{id:equipment.id}});}// LOOP THROUGH MATERIALS
for(let i=0;i<materials.length;i++){const material=materials[i];// delete estimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,materialId:material.id}});await _models.UserMaterials.destroy({where:{id:material.id}});}// LOOP THROUGH LABOURS
for(let i=0;i<labours.length;i++){const labor=labours[i];// delete estimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,labourId:labor.id}});// delete labours
await _models.UserLabours.destroy({where:{id:labor.id}});}// LOOP THROUGH SUBCONTRACTORS
for(let i=0;i<subContractors.length;i++){const subc=subContractors[i];// delete estimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,subContractorId:subc.id}});await _models.UserSubContractors.destroy({where:{id:subc.id}});}const totalAmount=editedEstimationRate*estimationQty;// update estimation
await estimation.update({name:editedName,estimationRate:editedEstimationRate,estimationQuantity:estimationQty,wastagePercentage:0,transportPercentage:0,profitPercentage:0,overHeadPercentage:0,contigencyPercentage:0,equipmentTotal:0,materialTotal:0,wastageTotal:0,transportTotal:0,subtotal:0,profitTotal:0,overHeadTotal:0,contigencyTotal:0,estimationTotalAmount:totalAmount.toFixed(2),materialCostPerWorkItem:0,materialRatePerUnit:0,equipmentCostPerWorkItem:0,equipmentRatePerUnit:0,indirectCostPerWorkItem:0,indirectRatePerUnit:0,labourCostperWorkItem:0,labourRatePerUnit:0,subcontractorCostPerWorkItem:0});// get updated estimation
const updatedEst=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Estimation updated successfully",updatedEst);}// ==============Variables for calculation====================
let equipmentTotal=0;let fuelTotal=0;let labourTotal=0;let subcontractorTotal=0;// ============Loop for equipment calculation===============
for(let i=0;i<equipments.length;i++){const equipment=equipments[i];// equipment Performance
const equipmentPerformance=+equipment?.caveragePerUnit*estimationQty;const calculatedPrice=+equipment?.number*+equipment.hireRatePrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// ==============EQUIPMENT TOTAL PRICE====================
equipmentTotal+=equipmentTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimation.id,equipmentId:equipment.id}});await estimationLibary.update({equipmentPerformance:equipmentPerformance,equipmentTotalAmount:equipmentTotalAmount});}// LOOP THROUGH MATERIALS
for(let i=0;i<materials.length;i++){const material=materials[i];// calculate machine quantinty formula
// formaulas material and equipment
const materialFactorQuantity=+material.caveragePerUnit*estimationQty;const materialTotalAmount=materialFactorQuantity*+material.price;// ==============MATERIAL TOTAL PRICE====================
fuelTotal+=materialTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimation.id,materialId:material.id}});await estimationLibary.update({materialFactorQuantity:materialFactorQuantity.toFixed(2),materialTotalAmount:materialTotalAmount.toFixed(2)});}// LOOP THROUGH LABOURS
for(let i=0;i<labours.length;i++){const labor=labours[i];// formaulas
const labourFactorQuantity=+labor.caveragePerUnit*estimationQty;const calculatedWages=+labor.number*+labor.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;// ==============MATERIAL TOTAL PRICE====================
labourTotal+=labourTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimation.id,labourId:labor.id}});await estimationLibary.update({labourFactorQuantity,labourTotalAmount});}// LOOP THROUGH SUBCONTRACTORS
for(let i=0;i<subContractors.length;i++){const subc=subContractors[i];// formaulas
const subContractorTotalAmount=estimationQty*+subc.price;// ==============MATERIAL TOTAL PRICE====================
subcontractorTotal+=subContractorTotalAmount;const updatesub=await _models.UserSubContractors.findOne({where:{id:subc.id}});await updatesub.update({quantity:estimationQty});// Update estimationLibrary
const estimationLibary=await _models.UserEstimationLibrary.findOne({where:{estimationId:estimation.id,subContractorId:subc.id}});await estimationLibary.update({subContractorTotalAmount});}// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=fuelTotal*wastage;const calculatedTransportTotal=fuelTotal*transport;// material
const materialCostPerWorkItem=fuelTotal+ +calculatedWastageTotal+ +calculatedTransportTotal;const materialRatePerUnit=estimationQty>0?materialCostPerWorkItem/estimationQty:materialCostPerWorkItem;// equipment
const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=estimationQty>0?equipmentCostPerWorkiItem/estimationQty:equipmentCostPerWorkiItem;// labour
const labourCostperWorkItem=labourTotal;const labourRatePerUnit=estimationQty>0?labourCostperWorkItem/estimationQty:labourCostperWorkItem;// subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// // calculate subtotal formula ========= Subtotal =========
const calculatedSubtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate material Total ======= Material Total ==========
const materialTotal=fuelTotal+calculatedWastageTotal+calculatedTransportTotal;// calculate profile, overhead and contigency formula
const calculatedOverHead=+estimation?.estimationRate*estimationQty*overHead;const tempProfit=+estimation?.estimationRate*estimationQty+calculatedOverHead;const calculatedProfit=tempProfit*profit;const tempContigency=+estimation?.estimationRate*estimationQty+calculatedProfit;const calculatedContigency=tempContigency*contigency;// calculate estimationRate and estimationTotalAmount formula
const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;// rate per unit formula
const indirectRatePerUnit=estimationQty>0?indirectCostPerWorkItem/estimationQty:indirectCostPerWorkItem;const totalAmount=calculatedSubtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await estimation.update({name:editedName,wastagePercentage:+wastage,transportPercentage:+transport,profitPercentage:+profit,overHeadPercentage:+overHead,contigencyPercentage:+contigency,equipmentTotal:+equipmentTotal.toFixed(2),materialTotal:+materialTotal.toFixed(2),wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),subtotal:+calculatedSubtotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overHeadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationQuantity:+estimationQty,materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});// get updated estimation
const updatedEst=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Estimation updated successfully",updatedEst);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{equipments,materials,labours,subContractors}=estimation;// use default percemyage or working hours when user dont not input
const estimationQty=+estimationQuantity?+estimationQuantity:+estimation?.estimationQuantity;const wastage=+wastagePercentage===0?0:+wastagePercentage>0?+wastagePercentage*0.01:+estimation?.wastagePercentage;const transport=+transportPercentage===0?0:+transportPercentage>0?+transportPercentage*0.01:+estimation?.transportPercentage;const profit=+profitPercentage===0?0:+profitPercentage>0?+profitPercentage*0.01:+estimation?.profitPercentage;const overHead=+overHeadPercentage===0?0:+overHeadPercentage>0?+overHeadPercentage*0.01:+estimation?.overHeadPercentage;const contigency=+contigencyPercentage===0?0:+contigencyPercentage>0?+contigencyPercentage*0.01:+estimation?.contigencyPercentage;const editedName=editName?editName:estimation.name;// ==============Variables for calculation====================
let equipmentTotal=0;let fuelTotal=0;let labourTotal=0;let subcontractorTotal=0;// ============Loop for equipment calculation===============
for(let i=0;i<equipments.length;i++){const equipment=equipments[i];// equipment Performance
const equipmentPerformance=+equipment?.caveragePerUnit*estimationQty;const calculatedPrice=+equipment?.number*+equipment.hireRatePrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// ==============EQUIPMENT TOTAL PRICE====================
equipmentTotal+=equipmentTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimation.id,equipmentId:equipment.id}});await estimationLibary.update({equipmentPerformance:equipmentPerformance,equipmentTotalAmount:equipmentTotalAmount});}// LOOP THROUGH MATERIALS
for(let i=0;i<materials.length;i++){const material=materials[i];// calculate machine quantinty formula
// formaulas material and equipment
const materialFactorQuantity=+material.caveragePerUnit*estimationQty;const materialTotalAmount=materialFactorQuantity*+material.price;// ==============MATERIAL TOTAL PRICE====================
fuelTotal+=materialTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimation.id,materialId:material.id}});await estimationLibary.update({materialFactorQuantity:materialFactorQuantity.toFixed(2),materialTotalAmount:materialTotalAmount.toFixed(2)});}// LOOP THROUGH LABOURS
for(let i=0;i<labours.length;i++){const labor=labours[i];// formaulas
const labourFactorQuantity=+labor.caveragePerUnit*estimationQty;const calculatedWages=+labor.number*+labor.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;// ==============MATERIAL TOTAL PRICE====================
labourTotal+=labourTotalAmount;// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimation.id,labourId:labor.id}});await estimationLibary.update({labourFactorQuantity,labourTotalAmount});}// LOOP THROUGH SUBCONTRACTORS
for(let i=0;i<subContractors.length;i++){const subc=subContractors[i];// formaulas
const subContractorTotalAmount=estimationQty*+subc.price;// ==============MATERIAL TOTAL PRICE====================
subcontractorTotal+=subContractorTotalAmount;const updatesub=await _models.SubContractors.findOne({where:{id:subc.id}});await updatesub.update({quantity:estimationQty});// Update estimationLibrary
const estimationLibary=await _models.EstimationLibrary.findOne({where:{estimationId:estimation.id,subContractorId:subc.id}});await estimationLibary.update({subContractorTotalAmount});}// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=fuelTotal*wastage;const calculatedTransportTotal=fuelTotal*transport;// material
const materialCostPerWorkItem=fuelTotal+ +calculatedWastageTotal+ +calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/estimationQty;// equipment
const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/estimationQty;// labour
const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/estimationQty;// subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// // calculate subtotal formula ========= Subtotal =========
const calculatedSubtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate material Total ======= Material Total ==========
const materialTotal=fuelTotal+calculatedWastageTotal+calculatedTransportTotal;// // calculate profile, overhead and contigency formula
const calculatedOverHead=+estimation?.estimationRate*estimationQty*overHead;const tempProfit=+estimation?.estimationRate*estimationQty+calculatedOverHead;const calculatedProfit=tempProfit*profit;const tempContigency=+estimation?.estimationRate*estimationQty+calculatedProfit;const calculatedContigency=tempContigency*contigency;// calculate estimationRate and estimationTotalAmount formula
const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;// rate per unit formula
const indirectRatePerUnit=indirectCostPerWorkItem/estimationQty;const totalAmount=calculatedSubtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await estimation.update({name:editedName,wastagePercentage:wastage,transportPercentage:transport,profitPercentage:profit,overHeadPercentage:overHead,contigencyPercentage:contigency,equipmentTotal:+equipmentTotal.toFixed(2),materialTotal:+materialTotal.toFixed(2),wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),subtotal:+calculatedSubtotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overHeadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationQuantity:+estimationQty,materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});// get updated estimation
const updatedEst=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Estimation updated successfully",updatedEst);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// delete project
static async deleteProject(req,res){try{const{id:userId,managerId,role}=req.user;const{id}=req.params;if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id,userId:managerId?managerId:userId}});const estimations=await _models.UserEstimations.findAll({where:{userId:managerId?managerId:userId,projectId:req.params.id},order:[["id","ASC"]]});const projectData={...project.dataValues,activities:estimations};const{activities}=projectData;// loop through workSpecification and delete UserEstimation, UserEstimationLibrary
// loop through activities and delete UserEstimationCategory, UserEstimation, UserEstimationLibrary
for(let j=0;j<activities.length;j++){const{id:activityId,userEstimationCategoryId}=activities[j];await _models.UserEstimationLibrary.destroy({where:{estimationId:activityId}});await _models.UserEstimations.destroy({where:{id:activityId}});await _models.UserEstimationCategory.destroy({where:{id:userEstimationCategoryId}});}// delete all equipments, materials, labours and subcontractor that has project id
await _models.UserEquipments.destroy({where:{projectId:id}});await _models.UserMaterials.destroy({where:{projectId:id}});await _models.UserLabours.destroy({where:{projectId:id}});await _models.UserSubContractors.destroy({where:{projectId:id}});await project.destroy();return(0,_utils.onSuccess)(res,200,"Project Deleted Successfully",project);}if(role==="owner"){const template=await _models.Templates.findOne({where:{id:req.params.id}});const estimations=await _models.Estimations.findAll({where:{templateId:req.params.id},order:[["id","ASC"]],include:[{model:_models.EstimationCategory,as:"category",attributes:["name","code",'id']},{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const projectData={...template.dataValues,activities:estimations};const{activities}=projectData;for(let j=0;j<activities.length;j++){const{id:activityId,userEstimationCategoryId}=activities[j];await _models.EstimationLibrary.destroy({where:{estimationId:activityId}});await _models.Estimations.destroy({where:{id:activityId}});await _models.EstimationCategory.destroy({where:{id:userEstimationCategoryId}});}// delete all equipments, materials, labours and subcontractor that has project id
await _models.Equipments.destroy({where:{templateId:id}});await _models.Materials.destroy({where:{templateId:id}});await _models.Labours.destroy({where:{templateId:id}});await _models.SubContractors.destroy({where:{templateId:id}});await template.destroy();return(0,_utils.onSuccess)(res,200,"Deleted Successfully",template);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// add equipment to estimation
static async addEquipmentToProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"Project Not Found");const currencyCode=project?.currencyCode;const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{equipmentName}=req.body;if(!equipmentName||typeof equipmentName!=="string"){return(0,_utils.onError)(res,400,"Equipment name is required");}const equipment=await _models.UserEquipments.findOne({where:{name:equipmentName,userId:managerId?managerId:userId,isResource:true,projectId}});if(!equipment){return(0,_utils.onError)(res,404,"Resource not found, add this resource to this project");}const equipmentExist=estimation.equipments.find(equipment=>equipment.name===equipmentName);if(equipmentExist)return(0,_utils.onError)(res,409,"Equipment Already Added");// formaulas equipment
const equipExt=await _models.UserEquipments.findOne({where:{name:equipment.name,projectId,isResource:false}});if(equipExt){const appliedPrice=+equipExt.hireRatePrice;const currency=equipExt?.currency?equipExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdEquipment=await _models.UserEquipments.create({name:equipExt.name,unit:equipExt.unit,caveragePerUnit:equipExt.caveragePerUnit,hireRatePrice:finalPrice,number:equipExt.number,supplierId:equipExt?.supplierId,userId:managerId?managerId:userId,projectId,currency,isResource:false,inputQuantity:equipExt?.inputQuantity,outputQuantity:equipExt?.outputQuantity,inputUnit:equipExt?.inputUnit,outputUnit:equipExt?.outputUnit,adjustFactor:equipExt?.adjustFactor});const inputQuantity=+(0,_utils.returnNumber)(createdEquipment?.inputQuantity);const outputQuantity=+(0,_utils.returnNumber)(createdEquipment?.outputQuantity);const adjustFactor=+(0,_utils.returnNumber)(createdEquipment?.adjustFactor);const adjustResult=adjustFactor*+estimation.estimationQuantity;const inputResult=inputQuantity/outputQuantity;const finalPerformance=(+inputResult*adjustResult).toFixed(2);const equipmentPerformance=+finalPerformance;// const equipmentPerformance =
//   +createdEquipment.caveragePerUnit * +estimation.estimationQuantity;
const calculatedPrice=+createdEquipment?.number*+createdEquipment.hireRatePrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,equipmentId:createdEquipment.id,equipmentPerformance:equipmentPerformance,equipmentTotalAmount:equipmentTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ========LABOURS ==============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Equipment added successfully",updateEstimation);}const appliedPrice=+equipment.hireRatePrice;const currency=equipment?.currency?equipment?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdEquipment=await _models.UserEquipments.create({name:equipment.name,unit:equipment.unit,caveragePerUnit:equipment.caveragePerUnit,hireRatePrice:finalPrice,number:equipment.number,supplierId:equipment?.supplierId,userId:managerId?managerId:userId,projectId,currency,isResource:false,inputQuantity:equipment?.inputQuantity,outputQuantity:equipment?.outputQuantity,inputUnit:equipment?.inputUnit,outputUnit:equipment?.outputUnit,adjustFactor:equipment?.adjustFactor});const inputQuantity=+createdEquipment?.inputQuantity;const outputQuantity=+createdEquipment?.outputQuantity;const adjustFactor=+createdEquipment?.adjustFactor;const adjustResult=adjustFactor*+estimation.estimationQuantity;const inputResult=inputQuantity/outputQuantity;const finalPerformance=(+inputResult*adjustResult).toFixed(2);const equipmentPerformance=+finalPerformance;// const equipmentPerformance =
//   +createdEquipment.caveragePerUnit * +estimation.estimationQuantity;
const calculatedPrice=+createdEquipment?.number*+createdEquipment.hireRatePrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,equipmentId:createdEquipment.id,equipmentPerformance:equipmentPerformance,equipmentTotalAmount:equipmentTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ========LABOURS ==============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Equipment added successfully",updateEstimation);}if(role==="owner"){const project=await _models.Templates.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"Templates Not Found");const currencyCode=project?.currencyCode;const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{equipmentName}=req.body;if(!equipmentName||typeof equipmentName!=="string"){return(0,_utils.onError)(res,400,"Equipment name is required");}const defaultEquipment=await _models.Equipments.findOne({where:{name:equipmentName}});if(!defaultEquipment){return(0,_utils.onError)(res,404,"Equipment not found, add new one or use existing equipment");}const equipmentExist=estimation.equipments.find(equipment=>equipment.name===equipmentName);if(equipmentExist)return(0,_utils.onError)(res,409,"Equipment Already Added");if(defaultEquipment){// create UserMaterials and UserEquipments from defaultEquipment and defaultMaterial
const existingEqp=await _models.Equipments.findOne({where:{name:defaultEquipment.name,templateId:projectId}});if(existingEqp){const appliedPrice=+existingEqp.hireRatePrice;const currency=existingEqp?.currency?existingEqp?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdEquipment=await _models.Equipments.create({name:existingEqp.name,unit:existingEqp.unit,caveragePerUnit:existingEqp.caveragePerUnit,hireRatePrice:finalPrice,number:existingEqp.number,supplierId:existingEqp?.supplierId,templateId:projectId,currency,inputQuantity:existingEqp?.inputQuantity,outputQuantity:existingEqp?.outputQuantity,inputUnit:existingEqp?.inputUnit,outputUnit:existingEqp?.outputUnit,adjustFactor:existingEqp?.adjustFactor});// formaulas material and equipment
const inputQuantity=+createdEquipment?.inputQuantity;const outputQuantity=+createdEquipment?.outputQuantity;const adjustFactor=+createdEquipment?.adjustFactor;const adjustResult=adjustFactor*+estimation.estimationQuantity;const inputResult=inputQuantity/outputQuantity;const finalPerformance=(+inputResult*adjustResult).toFixed(2);const equipmentPerformance=+finalPerformance;// const equipmentPerformance =
//   +createdEquipment.caveragePerUnit *
//   +estimation.estimationQuantity;
const calculatedPrice=createdEquipment?.number*+createdEquipment.hireRatePrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// add equipment and mataerial to estimationLibary
await _models.EstimationLibrary.create({estimationId:estimation.id,equipmentId:createdEquipment.id,equipmentPerformance:equipmentPerformance.toFixed(2),equipmentTotalAmount:equipmentTotalAmount.toFixed(2),templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ===============LABOUR =============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Equipment added successfully",updateEstimation);}else{const appliedPrice=+defaultEquipment.hireRatePrice;const currency=defaultEquipment?.currency?defaultEquipment?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdEquipment=await _models.Equipments.create({name:defaultEquipment.name,unit:defaultEquipment.unit,caveragePerUnit:defaultEquipment.caveragePerUnit,hireRatePrice:finalPrice,number:defaultEquipment.number,supplierId:defaultEquipment?.supplierId,templateId:projectId,currency,inputQuantity:defaultEquipment?.inputQuantity,outputQuantity:defaultEquipment?.outputQuantity,inputUnit:defaultEquipment?.inputUnit,outputUnit:defaultEquipment?.outputUnit,adjustFactor:defaultEquipment?.adjustFactor});// formaulas material and equipment
const inputQuantity=+createdEquipment?.inputQuantity;const outputQuantity=+createdEquipment?.outputQuantity;const adjustFactor=+createdEquipment?.adjustFactor;const adjustResult=adjustFactor*+estimation.estimationQuantity;const inputResult=inputQuantity/outputQuantity;const finalPerformance=(+inputResult*adjustResult).toFixed(2);const equipmentPerformance=+finalPerformance;// const equipmentPerformance =
//   +createdEquipment.caveragePerUnit *
//   +estimation.estimationQuantity;
const calculatedPrice=createdEquipment?.number*+createdEquipment.hireRatePrice*equipmentPerformance;const equipmentTotalAmount=calculatedPrice;// add equipment and mataerial to estimationLibary
await _models.EstimationLibrary.create({estimationId:estimation.id,equipmentId:createdEquipment.id,equipmentPerformance:equipmentPerformance.toFixed(2),equipmentTotalAmount:equipmentTotalAmount.toFixed(2),templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ===============LABOUR =============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Equipment added successfully",updateEstimation);}}}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// remove equipment from estimation
static async removeEquipmentFromProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{equipmentName}=req.body;if(!equipmentName||typeof equipmentName!=="string"){return(0,_utils.onError)(res,400,"Equipment name is required");}const equipmentExist=estimation.equipments.find(equipment=>equipment.name===equipmentName);if(!equipmentExist)return(0,_utils.onError)(res,404,"equipment doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,equipmentId:equipmentExist.id}});await _models.UserEquipments.destroy({where:{id:equipmentExist.id}});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary.materialTotalAmount;},0);// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Equipment Removed successfully",updateEstimation);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{equipmentName}=req.body;if(!equipmentName||typeof equipmentName!=="string"){return(0,_utils.onError)(res,400,"Equipment name is required");}const equipmentExist=estimation.equipments.find(equipment=>equipment.name===equipmentName);if(!equipmentExist)return(0,_utils.onError)(res,404,"equipment doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.EstimationLibrary.destroy({where:{estimationId:estimation.id,equipmentId:equipmentExist.id}});await _models.Equipments.destroy({where:{id:equipmentExist.id}});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary.materialTotalAmount;},0);// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Equipment Removed successfully",updateEstimation);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// edit estimation equipment
static async editProjectEstimationEquipment(req,res){try{const{caveragePerUnit,equipmentName,equipmentPrice,editName,editUnit,number,outputUnit,outputQuantity,adjustFactor}=req.body;const{id,projectId}=req.params;// estimation
const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}// check if equipment exist
const equipmentExist=estimation.equipments.find(equipment=>equipment.name===equipmentName);if(!equipmentExist){return(0,_utils.onError)(res,404,"Equipment you are trying to update does not exist with this estimation");}// caverage per unit
const caverage=caveragePerUnit?caveragePerUnit:+equipmentExist.caveragePerUnit;// equipment price
const equipPrice=equipmentPrice?equipmentPrice:+equipmentExist.hireRatePrice;// equipment id
const equipmentId=equipmentExist.id;const equipmentNumber=number?number:+equipmentExist?.number;const editEquipmentName=editName?editName:equipmentExist.name;const editEquipmentUnit=editUnit?editUnit:equipmentExist.unit;// find equipment
const equipment=await _models.UserEquipments.findOne({where:{name:equipmentName,id:equipmentId}});await _models.UserEquipments.update({name:editEquipmentName,unit:editEquipmentUnit,hireRatePrice:equipPrice},{where:{name:equipmentName,projectId}});// update equipment
await equipment.update({caveragePerUnit:caverage,number:equipmentNumber,outputUnit,outputQuantity,adjustFactor});// make new calculation;
await(0,_computation.calculateSimilarProjectEquipment)(projectId);const updateed=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Equipment Updated successfully",updateed);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}// check if equipment exist
const equipmentExist=estimation.equipments.find(equipment=>equipment.name===equipmentName);if(!equipmentExist){return(0,_utils.onError)(res,404,"Equipment you are trying to update does not exist with this estimation");}// caverage per unit
const caverage=caveragePerUnit?caveragePerUnit:+equipmentExist.caveragePerUnit;// equipment price
const equipPrice=+equipmentPrice?+equipmentPrice:+equipmentExist.hireRatePrice;// equipment id
const equipmentId=equipmentExist.id;const equipmentNumber=number?number:+equipmentExist?.number;const editEquipmentName=editName?editName:equipmentExist.name;const editEquipmentUnit=editUnit?editUnit:equipmentExist.unit;// find equipment
const equipment=await _models.Equipments.findOne({where:{name:equipmentName,id:equipmentId}});const upd=await _models.Equipments.update({name:editEquipmentName,unit:editEquipmentUnit,hireRatePrice:equipPrice,inputUnit,outputUnit,outputQuantity,adjustFactor},{where:{name:equipmentName,templateId:projectId}});// update equipment
await equipment.update({caveragePerUnit:caverage,number:equipmentNumber});// make new calculation;
await(0,_computation.calculateSimilarTemplateEquipment)(projectId);const updateed=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Equipment Updated successfully",updateed);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// add material to estimation
static async addMaterialToProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"project not found");const currencyCode=project?.currencyCode;const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{materialName}=req.body;if(!materialName||typeof materialName!=="string"){return(0,_utils.onError)(res,400,"Material name is required");}const material=await _models.UserMaterials.findOne({where:{name:materialName,userId:managerId?managerId:userId}});const defaultmaterial=await _models.Materials.findOne({where:{name:materialName}});if(!material&&!defaultmaterial){return(0,_utils.onError)(res,404,"material not found, add new one or use existing material");}const materialExist=estimation.materials.find(material=>material.name===materialName);if(materialExist)return(0,_utils.onError)(res,409,"material already exists");if(defaultmaterial){// create UserMaterials from defaultMaterial
const matExt=await _models.UserMaterials.findOne({where:{name:defaultmaterial.name,projectId}});if(matExt){const appliedPrice=+matExt.price;const currency=matExt?.currency?matExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdMaterial=await _models.UserMaterials.create({name:matExt.name,unit:matExt.unit,caveragePerUnit:matExt.caveragePerUnit,quantity:matExt.quantity,price:finalPrice,supplierId:matExt?.supplierId,userId:managerId?managerId:userId,projectId,currency,isResource:false});// formaulas material and equipment
const materialFactorQuantity=+createdMaterial.caveragePerUnit*+estimation.estimationQuantity;const materialTotalAmount=materialFactorQuantity*+createdMaterial.price;await _models.UserEstimationLibrary.create({estimationId:estimation.id,materialId:createdMaterial.id,materialFactorQuantity:materialFactorQuantity,materialTotalAmount:materialTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);//  ========= LABOUR WASTAGE PRICE =======
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Material added successfully",updateEstimation);}const appliedPrice=+defaultmaterial.price;const currency=defaultmaterial?.currency?defaultmaterial?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdMaterial=await _models.UserMaterials.create({name:defaultmaterial.name,unit:defaultmaterial.unit,caveragePerUnit:defaultmaterial.caveragePerUnit,quantity:defaultmaterial.quantity,price:finalPrice,supplierId:defaultmaterial?.supplierId,userId:managerId?managerId:userId,projectId,currency,isResource:false});// formaulas material and equipment
const materialFactorQuantity=+createdMaterial.caveragePerUnit*+estimation.estimationQuantity;const materialTotalAmount=materialFactorQuantity*+createdMaterial.price;await _models.UserEstimationLibrary.create({estimationId:estimation.id,materialId:createdMaterial.id,materialFactorQuantity:materialFactorQuantity,materialTotalAmount:materialTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);//  ========= LABOUR WASTAGE PRICE =======
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Material added successfully",updateEstimation);}// formaulas material
const mtexist=await _models.UserMaterials.findOne({where:{name:material.name,projectId}});if(mtexist){const appliedPrice=+mtexist.price;const currency=mtexist?.currency?mtexist?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdMaterial=await _models.UserMaterials.create({name:mtexist.name,unit:mtexist.unit,caveragePerUnit:mtexist.caveragePerUnit,quantity:mtexist.quantity,price:finalPrice,supplierId:mtexist?.supplierId,userId:managerId?managerId:userId,projectId,currency,isResource:false});const materialFactorQuantity=+createdMaterial.caveragePerUnit*+estimation.estimationQuantity;const materialTotalAmount=materialFactorQuantity*+createdMaterial.price;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,materialId:createdMaterial.id,materialFactorQuantity:materialFactorQuantity,materialTotalAmount:materialTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);//  ========= LABOUR WASTAGE PRICE =======
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Material added successfully",updateEstimation);}const appliedPrice=+material.price;const currency=material?.currency?material?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdMaterial=await _models.UserMaterials.create({name:material.name,unit:material.unit,caveragePerUnit:material.caveragePerUnit,quantity:material.quantity,price:finalPrice,supplierId:material?.supplierId,userId:managerId?managerId:userId,projectId,currency,isResource:false});const materialFactorQuantity=+createdMaterial.caveragePerUnit*+estimation.estimationQuantity;const materialTotalAmount=materialFactorQuantity*+createdMaterial.price;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,materialId:createdMaterial.id,materialFactorQuantity:materialFactorQuantity,materialTotalAmount:materialTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);//  ========= LABOUR WASTAGE PRICE =======
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Material added successfully",updateEstimation);}if(role==="owner"){const project=await _models.Templates.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"template not found");const currencyCode=project?.currencyCode;const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{materialName}=req.body;if(!materialName||typeof materialName!=="string"){return(0,_utils.onError)(res,400,"Material name is required");}const material=await _models.UserMaterials.findOne({where:{name:materialName,userId:managerId?managerId:userId}});const defaultmaterial=await _models.Materials.findOne({where:{name:materialName}});if(!defaultmaterial){return(0,_utils.onError)(res,404,"material not found");}const materialExist=estimation.materials.find(material=>material.name===materialName);if(materialExist)return(0,_utils.onError)(res,409,"material already exists");if(defaultmaterial){// create UserMaterials from defaultMaterial
const matExt=await _models.Materials.findOne({where:{name:defaultmaterial.name,templateId:projectId}});if(matExt){const appliedPrice=+matExt.price;const currency=matExt?.currency?matExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdMaterial=await _models.Materials.create({name:matExt.name,unit:matExt.unit,caveragePerUnit:matExt.caveragePerUnit,quantity:matExt.quantity,price:finalPrice,supplierId:matExt?.supplierId,templateId:projectId,currency});// formaulas material and equipment
const materialFactorQuantity=+createdMaterial.caveragePerUnit*+estimation.estimationQuantity;const materialTotalAmount=materialFactorQuantity*+createdMaterial.price;await _models.EstimationLibrary.create({estimationId:estimation.id,materialId:createdMaterial.id,materialFactorQuantity:materialFactorQuantity,materialTotalAmount:materialTotalAmount,templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);//  ========= LABOUR WASTAGE PRICE =======
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Material added successfully",updates);}const appliedPrice=+defaultmaterial.price;const currency=defaultmaterial?.currency?defaultmaterial?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdMaterial=await _models.Materials.create({name:defaultmaterial.name,unit:defaultmaterial.unit,caveragePerUnit:defaultmaterial.caveragePerUnit,quantity:defaultmaterial.quantity,price:finalPrice,supplierId:defaultmaterial?.supplierId,templateId:projectId,currency});// formaulas material and equipment
const materialFactorQuantity=+createdMaterial.caveragePerUnit*+estimation.estimationQuantity;const materialTotalAmount=materialFactorQuantity*+createdMaterial.price;await _models.EstimationLibrary.create({estimationId:estimation.id,materialId:createdMaterial.id,materialFactorQuantity:materialFactorQuantity,materialTotalAmount:materialTotalAmount,templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);//  ========= LABOUR WASTAGE PRICE =======
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Material added successfully",updates);}}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// remove material from estimation
static async removeMaterialFromProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{materialName}=req.body;if(!materialName||typeof materialName!=="string"){return(0,_utils.onError)(res,400,"material name is required");}const materialExist=estimation.materials.find(material=>material.name===materialName);if(!materialExist)return(0,_utils.onError)(res,404,"material doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,materialId:materialExist.id}});await _models.UserMaterials.destroy({where:{id:materialExist.id}});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Material Removed successfully",updates);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{materialName}=req.body;if(!materialName||typeof materialName!=="string"){return(0,_utils.onError)(res,400,"material name is required");}const materialExist=estimation.materials.find(material=>material.name===materialName);if(!materialExist)return(0,_utils.onError)(res,404,"material doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.EstimationLibrary.destroy({where:{estimationId:estimation.id,materialId:materialExist.id}});await _models.Materials.destroy({where:{id:materialExist.id}});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Material Removed successfully",updates);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// edit estimation materials
static async editProjectEstimationMaterials(req,res){try{const{caveragePerUnit,materialName,materialPrice,editName,editUnit,outputUnit,outputQuantity,quantity}=req.body;// estimation
const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}//
const estimationQty=+estimation?.estimationQuantity;// check if equipment exist
const materialExist=estimation.materials.find(material=>material.name===materialName);if(!materialExist){return(0,_utils.onError)(res,404,"Material you are trying to update does not exist with this estimation");}// caverage per unit
const caverage=caveragePerUnit?caveragePerUnit:+materialExist.quantity;// equipment price
const matPrice=materialPrice?materialPrice:+materialExist.price;// equipment id
const materialId=materialExist.id;const editMaterialName=editName?editName:materialExist.name;const editMaterialUnit=editUnit?editUnit:materialExist.unit;// find equipment
const material=await _models.UserMaterials.findOne({where:{name:materialName,id:materialId}});await _models.UserMaterials.update({price:matPrice,name:editMaterialName,unit:editMaterialUnit},{where:{name:materialName,projectId}});// update equipment
await material.update({quantity:quantity,outputUnit,outputQuantity,adjustFactor:caverage});// make new calculation;
await(0,_computation.calculateSimilarProjectMaterial)(projectId);const updated=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Material Updated successfully",updated);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}//
const estimationQty=+estimation?.estimationQuantity;// check if equipment exist
const materialExist=estimation.materials.find(material=>material.name===materialName);if(!materialExist){return(0,_utils.onError)(res,404,"Material you are trying to update does not exist with this estimation");}// caverage per unit
const caverage=caveragePerUnit?caveragePerUnit:+materialExist.caveragePerUnit;// equipment price
const matPrice=materialPrice?materialPrice:+materialExist.price;// equipment id
const materialId=materialExist.id;const editMaterialName=editName?editName:materialExist.name;const editMaterialUnit=editUnit?editUnit:materialExist.unit;// find equipment
const material=await _models.Materials.findOne({where:{name:materialName,id:materialId}});await _models.Materials.update({price:matPrice,name:editMaterialName,unit:editMaterialUnit},{where:{name:materialName,templateId:projectId}});// update equipment
await material.update({quantity:quantity,outputUnit,outputQuantity,adjustFactor:caverage});// make new calculation;
await(0,_computation.calculateSimilarTemplateMaterial)(projectId);const updated=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Material Updated successfully",updated);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// add labour to estimation
static async addLabourToProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"Project not found");const currencyCode=project?.currencyCode;const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{labourName}=req.body;if(!labourName||typeof labourName!=="string"){return(0,_utils.onError)(res,400,"labour name is required");}const labour=await _models.UserLabours.findOne({where:{name:labourName,userId:managerId?managerId:userId}});const defaultLabour=await _models.Labours.findOne({where:{name:labourName}});if(!labour&&!defaultLabour){return(0,_utils.onError)(res,404,"labour not found, add new one or use existing material");}const labourExist=estimation.labours.find(labour=>labour.name===labourName);if(labourExist)return(0,_utils.onError)(res,409,"labour already exists");if(defaultLabour){// create UserLabours from defaultLabour
const labExt=await _models.UserLabours.findOne({where:{name:defaultLabour.name,projectId}});if(labExt){const appliedPrice=+labExt.wages;const currency=labExt?.currency?labExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdLabour=await _models.UserLabours.create({name:labExt.name,unit:labExt.unit,caveragePerUnit:labExt?.caveragePerUnit,number:labExt?.number,wages:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});// formaulas material and equipment
const labourFactorQuantity=+createdLabour?.caveragePerUnit*+estimation.estimationQuantity;const calculatedWages=+createdLabour.number*+createdLabour.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;await _models.UserEstimationLibrary.create({estimationId:estimation.id,labourId:createdLabour.id,labourFactorQuantity,labourTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Labour added successfully",updateEstimation);}const appliedPrice=+defaultLabour.wages;const currency=defaultLabour?.currency?defaultLabour?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdLabour=await _models.UserLabours.create({name:defaultLabour.name,unit:defaultLabour.unit,caveragePerUnit:defaultLabour?.caveragePerUnit,number:defaultLabour?.number,wages:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});// formaulas material and equipment
const labourFactorQuantity=+createdLabour?.caveragePerUnit*+estimation.estimationQuantity;const calculatedWages=+createdLabour.number*+createdLabour.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;await _models.UserEstimationLibrary.create({estimationId:estimation.id,labourId:createdLabour.id,labourFactorQuantity,labourTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Labour added successfully",updateEstimation);}// labour
const labExt=await _models.UserLabours.findOne({where:{name:labour.name,projectId}});if(labExt){const appliedPrice=+labExt.wages;const currency=labExt?.currency?labExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdLabour=await _models.UserLabours.create({name:labExt.name,unit:labExt.unit,caveragePerUnit:labExt?.caveragePerUnit,number:labExt?.number,wages:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});const labourFactorQuantity=+createdLabour?.caveragePerUnit*+estimation.estimationQuantity;const calculatedWages=+createdLabour.number*+createdLabour.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,labourId:labour.id,labourFactorQuantity,labourTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Labour added successfully",updateEstimation);}const appliedPrice=+labour.wages;const currency=labour?.currency?labour?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdLabour=await _models.UserLabours.create({name:labour.name,unit:labour.unit,caveragePerUnit:labour?.caveragePerUnit,number:labour?.number,wages:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});const labourFactorQuantity=+createdLabour?.caveragePerUnit*+estimation.estimationQuantity;const calculatedWages=+createdLabour.number*+createdLabour.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,labourId:labour.id,labourFactorQuantity,labourTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Labour added successfully",updateEstimation);}if(role==="owner"){const project=await _models.Templates.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"Templates not found");const currencyCode=project?.currencyCode;const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{labourName}=req.body;if(!labourName||typeof labourName!=="string"){return(0,_utils.onError)(res,400,"labour name is required");}const defaultLabour=await _models.Labours.findOne({where:{name:labourName}});if(!defaultLabour){return(0,_utils.onError)(res,404,"labour not found");}const labourExist=estimation.labours.find(labour=>labour.name===labourName);if(labourExist)return(0,_utils.onError)(res,409,"labour already exists");if(defaultLabour){// create UserLabours from defaultLabour
const labExt=await _models.Labours.findOne({where:{name:defaultLabour.name,templateId:projectId}});if(labExt){const appliedPrice=+labExt.wages;const currency=labExt?.currency?labExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdLabour=await _models.Labours.create({name:labExt.name,unit:labExt.unit,caveragePerUnit:labExt?.caveragePerUnit,number:labExt?.number,wages:finalPrice,templateId:projectId,currency});// formaulas material and equipment
const labourFactorQuantity=+createdLabour?.caveragePerUnit*+estimation.estimationQuantity;const calculatedWages=+createdLabour.number*+createdLabour.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;await _models.EstimationLibrary.create({estimationId:estimation.id,labourId:createdLabour.id,labourFactorQuantity,labourTotalAmount,templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Labour added successfully",updates);}const appliedPrice=+defaultLabour.wages;const currency=defaultLabour?.currency?defaultLabour?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const createdLabour=await _models.Labours.create({name:defaultLabour.name,unit:defaultLabour.unit,caveragePerUnit:defaultLabour?.caveragePerUnit,number:defaultLabour?.number,wages:finalPrice,templateId:projectId,currency});// formaulas material and equipment
const labourFactorQuantity=+createdLabour?.caveragePerUnit*+estimation.estimationQuantity;const calculatedWages=+createdLabour.number*+createdLabour.wages*labourFactorQuantity;const labourTotalAmount=calculatedWages;await _models.EstimationLibrary.create({estimationId:estimation.id,labourId:createdLabour.id,labourFactorQuantity,labourTotalAmount,templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Labour added successfully",updates);}}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// remove labour from estimation
static async removeLabourFromProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{labourName}=req.body;if(!labourName||typeof labourName!=="string"){return(0,_utils.onError)(res,400,"labour name is required");}const labourExist=estimation.labours.find(labour=>labour.name===labourName);if(!labourExist)return(0,_utils.onError)(res,404,"labour doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,labourId:labourExist.id}});await _models.UserLabours.destroy({where:{id:labourExist.id}});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Labour Removed successfully",updateEstimation);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{labourName}=req.body;if(!labourName||typeof labourName!=="string"){return(0,_utils.onError)(res,400,"labour name is required");}const labourExist=estimation.labours.find(labour=>labour.name===labourName);if(!labourExist)return(0,_utils.onError)(res,404,"labour doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.EstimationLibrary.destroy({where:{estimationId:estimation.id,labourId:labourExist.id}});await _models.Labours.destroy({where:{id:labourExist.id}});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Labour Removed successfully",updates);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// edit estimation labour
static async editLabourProjectEstimation(req,res){try{const{labourName,wages,number,editName,editUnit,outputUnit,outputQuantity,adjustFactor}=req.body;// estimation
const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}//
const estimationQty=+estimation?.estimationQuantity;// check if equipment exist
const labourExist=estimation.labours.find(labour=>labour.name===labourName);if(!labourExist){return(0,_utils.onError)(res,404,"Labour you are trying to update does not exist with this estimation");}// caverage per unit
const caverage=adjustFactor?adjustFactor:+labourExist.adjustFactor;// labour price
const labWages=wages?wages:+labourExist.wages;// labour id
const labourId=labourExist.id;const labourNumber=number?number:+labourExist.number;const editLabourName=editName?editName:labourExist.name;const editLabourUnit=editUnit?editUnit:labourExist.unit;// find equipment
const labour=await _models.UserLabours.findOne({where:{name:labourName,id:labourId}});await _models.UserLabours.update({wages:labWages,name:editLabourName,unit:editLabourUnit},{where:{name:labourName,projectId}});// update equipment
await labour.update({number:labourNumber,outputUnit,outputQuantity:~~outputQuantity,adjustFactor:~~caverage});// make new calculation;
await(0,_computation.calculateSimilarProjectLabour)(projectId);const updated=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Labour Updated successfully",updated);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}//
const estimationQty=+estimation?.estimationQuantity;// check if equipment exist
const labourExist=estimation.labours.find(labour=>labour.name===labourName);if(!labourExist){return(0,_utils.onError)(res,404,"Labour you are trying to update does not exist with this estimation");}// caverage per unit
const caverage=caveragePerUnit?caveragePerUnit:+labourExist.caveragePerUnit;// labour price
const labWages=wages?wages:+labourExist.wages;// labour id
const labourId=labourExist.id;const labourNumber=number?number:+labourExist.number;const editLabourName=editName?editName:labourExist.name;const editLabourUnit=editUnit?editUnit:labourExist.unit;// find equipment
const labour=await _models.Labours.findOne({where:{name:labourName,id:labourId}});await _models.Labours.update({name:editLabourName,unit:editLabourUnit,wages:labWages},{where:{name:labourName,templateId:projectId}});// update equipment
await labour.update({number:labourNumber,outputUnit,outputQuantity:~~outputQuantity,adjustFactor:~~caverage});// make new calculation;
await(0,_computation.calculateSimilarTemplateLabour)(projectId);const updated=await estimation.reload();return(0,_utils.onSuccess)(res,200,"Labour Updated successfully",updated);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// add subcontractor to estimation
static async addSubcontractorToProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const project=await _models.Projects.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"Project not found");const currencyCode=project?.currencyCode;const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{subcontractorName}=req.body;if(!subcontractorName||typeof subcontractorName!=="string"){return(0,_utils.onError)(res,400,"subcontractor name is required");}const subcontractor=await _models.UserSubContractors.findOne({where:{name:subcontractorName,userId:managerId?managerId:userId}});const default_subcontractor=await _models.SubContractors.findOne({where:{name:subcontractorName}});if(!subcontractor&&!default_subcontractor){return(0,_utils.onError)(res,404,"subcontracto not found, add new one or use existing material");}const subcontractor_Exist=estimation.subContractors.find(subc=>subc.name===subcontractorName);if(subcontractor_Exist)return(0,_utils.onError)(res,409,"subcontractor already exists");if(default_subcontractor){// create UserLabours from default_subcontractor
const subcoExt=await _models.UserSubContractors.findOne({where:{name:default_subcontractor.name,projectId}});if(subcoExt){const appliedPrice=+subcoExt.price;const currency=subcoExt?.currency?subcoExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const created_subcontractor=await _models.UserSubContractors.create({name:subcoExt.name,unit:subcoExt.unit,quantity:+estimation.estimationQuantity,price:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});// formaulas subcontractor
const subContractorTotalAmount=+created_subcontractor.quantity*+created_subcontractor.price;await _models.UserEstimationLibrary.create({estimationId:estimation.id,subContractorId:created_subcontractor.id,subContractorTotalAmount:+subContractorTotalAmount.toFixed(2),userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"subcontractor added successfully",updateEstimation);}const appliedPrice=+default_subcontractor.price;const currency=default_subcontractor?.currency?default_subcontractor?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const created_subcontractor=await _models.UserSubContractors.create({name:default_subcontractor.name,unit:default_subcontractor.unit,quantity:+estimation.estimationQuantity,price:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});// formaulas subcontractor
const subContractorTotalAmount=+created_subcontractor.quantity*+created_subcontractor.price;await _models.UserEstimationLibrary.create({estimationId:estimation.id,subContractorId:created_subcontractor.id,subContractorTotalAmount:+subContractorTotalAmount.toFixed(2),userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"subcontractor added successfully",updateEstimation);}// formaulas material and equipment
const subcExt=await _models.UserSubContractors.findOne({where:{name:subcontractor.name,projectId}});if(subcExt){const appliedPrice=+subcExt.price;const currency=subcExt?.currency?subcExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const created_subcontractor=await _models.UserSubContractors.create({name:subcExt.name,unit:subcExt.unit,quantity:+estimation.estimationQuantity,price:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});const subContractorTotalAmount=+created_subcontractor.quantity*+subcontractor.price;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,subContractorId:created_subcontractor.id,subContractorTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"subcontractor added successfully",updateEstimation);}const appliedPrice=+subcontractor.price;const currency=subcontractor?.currency?subcontractor?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const created_subcontractor=await _models.UserSubContractors.create({name:subcontractor.name,unit:subcontractor.unit,quantity:+estimation.estimationQuantity,price:finalPrice,userId:managerId?managerId:userId,projectId,currency,isResource:false});const subContractorTotalAmount=+created_subcontractor.quantity*+subcontractor.price;// add equipment and mataerial to estimationLibary
await _models.UserEstimationLibrary.create({estimationId:estimation.id,subContractorId:created_subcontractor.id,subContractorTotalAmount,userId:managerId?managerId:userId,projectId});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"subcontractor added successfully",updateEstimation);}if(role==="owner"){const project=await _models.Templates.findOne({where:{id:projectId}});if(!project)return(0,_utils.onError)(res,404,"template not found");const currencyCode=project?.currencyCode;const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{subcontractorName}=req.body;if(!subcontractorName||typeof subcontractorName!=="string"){return(0,_utils.onError)(res,400,"subcontractor name is required");}const default_subcontractor=await _models.SubContractors.findOne({where:{name:subcontractorName}});if(!default_subcontractor){return(0,_utils.onError)(res,404,"subcontractor not found");}const subcontractor_Exist=estimation.subContractors.find(subc=>subc.name===subcontractorName);if(subcontractor_Exist)return(0,_utils.onError)(res,409,"subcontractor already exists");if(default_subcontractor){// create UserLabours from default_subcontractor
const subcoExt=await _models.SubContractors.findOne({where:{name:default_subcontractor.name,templateId:projectId}});if(subcoExt){const appliedPrice=+subcoExt.price;const currency=subcoExt?.currency?subcoExt?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const created_subcontractor=await _models.SubContractors.create({name:subcoExt.name,unit:subcoExt.unit,quantity:+estimation.estimationQuantity,price:finalPrice,templateId:projectId,currency});// formaulas subcontractor
const subContractorTotalAmount=+created_subcontractor.quantity*+created_subcontractor.price;await _models.EstimationLibrary.create({estimationId:estimation.id,subContractorId:created_subcontractor.id,subContractorTotalAmount:+subContractorTotalAmount.toFixed(2),templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"subcontractor added successfully",updates);}const appliedPrice=+default_subcontractor.price;const currency=default_subcontractor?.currency?default_subcontractor?.currency:"RWF";let currencyConverter;if(appliedPrice>0){currencyConverter=new _currencyConverterLt.default({from:currency,to:currencyCode,amount:appliedPrice});}const response=await currencyConverter?.convert();const finalPrice=response;const created_subcontractor=await _models.SubContractors.create({name:default_subcontractor.name,unit:default_subcontractor.unit,quantity:+estimation.estimationQuantity,price:finalPrice,templateId:projectId,currency});// formaulas subcontractor
const subContractorTotalAmount=+created_subcontractor.quantity*+created_subcontractor.price;await _models.EstimationLibrary.create({estimationId:estimation.id,subContractorId:created_subcontractor.id,subContractorTotalAmount:+subContractorTotalAmount.toFixed(2),templateId:projectId});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+updateEstimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+updateEstimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+updateEstimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+updateEstimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+subcontractorCostPerWorkItem+labourCostperWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity*+updateEstimation?.overHeadPercentage;const tempProfit=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+updateEstimation?.profitPercentage;const tempContigency=+updateEstimation?.estimationRate*+updateEstimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+updateEstimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+updateEstimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"subcontractor added successfully",updates);}}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// remove subcontractor from estimation
static async removeSubcontractorFromProjectEstimation(req,res){try{const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{subcontractorName}=req.body;if(!subcontractorName||typeof subcontractorName!=="string"){return(0,_utils.onError)(res,400,"subcontractor name is required");}const subc_Exist=estimation.subContractors.find(subc=>subc.name===subcontractorName);if(!subc_Exist)return(0,_utils.onError)(res,404,"subcontractor doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.UserEstimationLibrary.destroy({where:{estimationId:estimation.id,subContractorId:subc_Exist.id}});await _models.UserSubContractors.destroy({where:{id:subc_Exist.id}});const updateEstimation=await _models.UserEstimations.findOne({where:{id:estimation.id},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.UserEstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});return(0,_utils.onSuccess)(res,200,"Subcontractor Removed successfully",updateEstimation);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}const{subcontractorName}=req.body;if(!subcontractorName||typeof subcontractorName!=="string"){return(0,_utils.onError)(res,400,"subcontractor name is required");}const subc_Exist=estimation.subContractors.find(subc=>subc.name===subcontractorName);if(!subc_Exist)return(0,_utils.onError)(res,404,"subcontractor doesn't exist within this estimation");// remove equipment from UserEstimationLibrary
await _models.EstimationLibrary.destroy({where:{estimationId:estimation.id,subContractorId:subc_Exist.id}});await _models.SubContractors.destroy({where:{id:subc_Exist.id}});const updateEstimation=await estimation.reload();const{equipments,materials,labours,subContractors}=updateEstimation;// ==============EQUIPMENT TOTAL PRICE====================
const equipmentTotal=equipments.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.equipmentTotalAmount;},0);// ==============MATERIAL TOTAL PRICE====================
const materialSubtotal=materials.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.materialTotalAmount;},0);// ============== LABOUR TOTAL PRICE ============
const labourTotal=labours.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.labourTotalAmount;},0);const labourCostperWorkItem=labourTotal;const labourRatePerUnit=labourCostperWorkItem/+updateEstimation.estimationQuantity;// ============== SUB CONTRACTOR TOTAL PRICE ===========
const subcontractorTotal=subContractors.reduce((acc,curr)=>{return acc+ +curr.EstimationLibrary?.subContractorTotalAmount;},0);// Subcontractor
const subcontractorCostPerWorkItem=subcontractorTotal;// =========Calculate Wastage and Transport=======
const calculatedWastageTotal=materialSubtotal*+estimation?.wastagePercentage;const calculatedTransportTotal=materialSubtotal*+estimation?.transportPercentage;const materialCostPerWorkItem=materialSubtotal+calculatedWastageTotal+calculatedTransportTotal;const materialRatePerUnit=materialCostPerWorkItem/+estimation.estimationQuantity;const equipmentCostPerWorkiItem=equipmentTotal;const equipmentRatePerUnit=equipmentCostPerWorkiItem/+estimation.estimationQuantity;const subtotal=materialCostPerWorkItem+equipmentCostPerWorkiItem+labourCostperWorkItem+subcontractorCostPerWorkItem;// calculate Overhead, Contigency and Profit
const calculatedOverHead=+estimation?.estimationRate*+estimation.estimationQuantity*+estimation?.overHeadPercentage;const tempProfit=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedOverHead;const calculatedProfit=tempProfit*+estimation?.profitPercentage;const tempContigency=+estimation?.estimationRate*+estimation.estimationQuantity+calculatedProfit;const calculatedContigency=tempContigency*+estimation?.contigencyPercentage;const indirectCostPerWorkItem=calculatedOverHead+calculatedContigency+calculatedProfit;const indirectRatePerUnit=indirectCostPerWorkItem/+estimation.estimationQuantity;const totalAmount=subtotal+indirectCostPerWorkItem;const ratePerUnit=equipmentRatePerUnit+materialRatePerUnit+labourRatePerUnit+indirectRatePerUnit+subcontractorCostPerWorkItem;// update estimation
await updateEstimation.update({wastageTotal:+calculatedWastageTotal.toFixed(2),transportTotal:+calculatedTransportTotal.toFixed(2),profitTotal:+calculatedProfit.toFixed(2),overheadTotal:+calculatedOverHead.toFixed(2),contigencyTotal:+calculatedContigency.toFixed(2),materialCostPerWorkItem:+materialCostPerWorkItem.toFixed(2),materialRatePerUnit:+materialRatePerUnit.toFixed(2),equipmentCostPerWorkItem:+equipmentCostPerWorkiItem.toFixed(2),equipmentRatePerUnit:+equipmentRatePerUnit.toFixed(2),indirectCostPerWorkItem:+indirectCostPerWorkItem.toFixed(2),indirectRatePerUnit:+indirectRatePerUnit.toFixed(2),estimationTotalAmount:+totalAmount.toFixed(2),estimationRate:+ratePerUnit.toFixed(2),subtotal:+subtotal.toFixed(2),labourCostperWorkItem:+labourCostperWorkItem.toFixed(2),labourRatePerUnit:+labourRatePerUnit.toFixed(2),subcontractorCostPerWorkItem:+subcontractorCostPerWorkItem.toFixed(2)});const updates=await updateEstimation.reload();return(0,_utils.onSuccess)(res,200,"Subcontractor Removed successfully",updates);}}catch(error){return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us",error.message);}}// edit estimation subcontractor
static async editSubcontractorProjectEstimation(req,res){try{const{subcontractorName,price,editName,editUnit}=req.body;// estimation
const{id,projectId}=req.params;const{id:userId,managerId,role}=req.user;if(role==="admin"||role==="manager"){const estimation=await _models.UserEstimations.findOne({where:{id,userId:managerId?managerId:userId,projectId},include:[{model:_models.UserMaterials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}// check if subcontractor exist
const subc_Exist=estimation.subContractors.find(subc=>subc.name===subcontractorName);if(!subc_Exist){return(0,_utils.onError)(res,404,"subcontractor you are trying to update does not exist with this estimation");}// caverage per unit
// subcontractor price
const subc_price=price?price:+subc_Exist.price;// subcontractor id
const subContractorId=subc_Exist.id;const editSubContractorName=editName?editName:subc_Exist.name;const editSubcontractorUnit=editUnit?editUnit:subc_Exist.unit;await _models.UserSubContractors.update({price:subc_price,name:editSubContractorName,unit:editSubcontractorUnit},{where:{name:subcontractorName,projectId}});// make new calculation;
await(0,_computation.calculateSimilarProjectSubcontractor)(projectId);const updated=await estimation.reload();return(0,_utils.onSuccess)(res,200,"subcontractor Updated successfully",updated);}if(role==="owner"){const estimation=await _models.Estimations.findOne({where:{id,templateId:projectId},include:[{model:_models.Materials,as:"materials",attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!estimation){return(0,_utils.onError)(res,404,"Estimation not found");}// check if subcontractor exist
const subc_Exist=estimation.subContractors.find(subc=>subc.name===subcontractorName);if(!subc_Exist){return(0,_utils.onError)(res,404,"subcontractor you are trying to update does not exist with this estimation");}// caverage per unit
// subcontractor price
const subc_price=price?price:+subc_Exist.price;// subcontractor id
const subContractorId=subc_Exist.id;const editSubContractorName=editName?editName:subc_Exist.name;const editSubcontractorUnit=editUnit?editUnit:subc_Exist.unit;// find subcontractor
const subcontractor=await _models.SubContractors.findOne({where:{name:subcontractorName,id:subContractorId}});await _models.SubContractors.update({price:subc_price,name:editSubContractorName,unit:editSubcontractorUnit},{where:{name:subcontractorName,templateId:projectId}});// update equipment
await(0,_computation.calculateSimilarTemplateSubcontractor)(projectId);const updated=await estimation.reload();return(0,_utils.onSuccess)(res,200,"subcontractor Updated successfully",updated);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong, try again after 5 minutes, otherwise contact us");}}// upload boq csv
static async importBOQViaCSV(req,res){const t=await _sequelize.default.transaction();try{const{id:userId,role,managerId}=req.user;const{projectId}=req.params;if(!req.files)return(0,_utils.onError)(res,400,"csv file is required");const{csvFile}=req.files;// TEMPORARY PATH
const csvTempPath=csvFile.tempFilePath;// check if file is a csv
const csvFileExtension=csvFile.name.split(".")[1];if(csvFileExtension!=="csv"){return(0,_utils.onError)(res,400,"Please enter a csv file");}const jsonArray=await(0,_csvtojson.default)().fromFile(csvTempPath);for(let i=0;i<jsonArray.length;i++){const data=jsonArray[i];if(!data.description){return(0,_utils.onError)(res,400,"description is required and header must be written as 'description'");}if(!data.unit){return(0,_utils.onError)(res,400,"unit is required and header must be written as 'Unit'");}if(!data.category){return(0,_utils.onError)(res,400,"main category name is required and header must be written as 'mategory'");}}if(role==="manager"||role==="admin"){const project=await _models.Projects.findOne({where:{id:projectId}});if(!project){return(0,_utils.onError)(res,404,'project not found');}// import boq
for(let i=0;i<jsonArray.length;i++){const boq=jsonArray[i];const description=boq?.description?.toLowerCase();const unit=boq?.unit?.toLowerCase();const quantity=boq?.quantity?+boq?.quantity:0;const category=boq?.category?.toLowerCase();const price=boq?.price?+boq.price:0;const code=boq?.code?.toLowerCase();const calculatedAmount=quantity*price;const categoryCreated=await _models.UserEstimationCategory.create({name:category,code,userId:managerId?managerId:userId,projectId},{transaction:t});// activtyCreated
const createdEstimation=await _models.UserEstimations.create({name:description,estimationUnit:unit,estimationQuantity:quantity,userEstimationCategoryId:categoryCreated.id,projectId,userId:managerId?managerId:userId,estimationRate:price,estimationTotalAmount:calculatedAmount.toFixed(2)},{transaction:t});}await t.commit();return(0,_utils.onSuccess)(res,200,"BOQ have been successfully added, select project again");}if(role==='owner'){const template=await _models.Templates.findOne({where:{id:projectId}});if(!template){return(0,_utils.onError)(res,404,'Template not found');}for(let i=0;i<jsonArray.length;i++){const boq=jsonArray[i];const description=boq?.description?.toLowerCase();const unit=boq?.unit?.toLowerCase();const quantity=boq?.quantity?+boq.quantity:0;const category=boq?.category?.toLowerCase();const price=boq?.price?+boq.price:0;const code=boq?.code?.toLowerCase();const calculatedAmount=quantity*price;const categoryCreated=await _models.EstimationCategory.create({name:category,code,templateId:projectId},{transaction:t});// activtyCreated
const createdEstimation=await _models.Estimations.create({name:description,estimationUnit:unit,estimationQuantity:quantity,userEstimationCategoryId:categoryCreated.id,templateId:projectId,userId:managerId?managerId:userId,estimationRate:price,estimationTotalAmount:calculatedAmount},{transaction:t});}await t.commit();return(0,_utils.onSuccess)(res,200,"BOQ have been successfully added, select project again");}}catch(error){console.log(error);await t.rollback();return(0,_utils.onError)(res,500,"something went wrong. try again");}}// map estimation to another project
static async mapEstimationToAnotherEstimation(req,res){try{const{id:userId,managerId,role}=req.user;const{projectId:destinationProjectId}=req.params;const{sourceProjectId,sourceEstimationId,destinationEstimationId}=req.body;if(role==='admin'||role==='manager'){const sourceproject=await _models.Projects.findOne({where:{id:sourceProjectId}});const destinationProject=await _models.Projects.findOne({where:{id:destinationProjectId}});if(!sourceproject){return(0,_utils.onError)(res,404,'source project not found');}if(!destinationProject){return(0,_utils.onError)(res,404,'destination project not found');}const sourceest1=await _models.UserEstimations.findOne({where:{id:sourceEstimationId,projectId:sourceproject.id},include:[{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages","brand","inputUnit","inputQuantity","outputUnit","outputQuantity","adjustFactor"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const destiest2=await _models.UserEstimations.findOne({where:{id:destinationEstimationId,projectId:destinationProjectId},include:[{model:_models.UserMaterials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.UserEquipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.UserLabours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.UserSubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!sourceest1){return(0,_utils.onError)(res,404,'source activity not found');}if(!destiest2){return(0,_utils.onError)(res,404,'destination activity not found');}const{equipments,materials,labours,subContractors}=sourceest1;const{equipments:desEquipment,materials:dseMaterial,labours:dseLabours,subContractors:dseSub}=destiest2;// delete existing resources
// delete equipments
for(let i=0;i<desEquipment.length;i++){const id=desEquipment[i].id;await _models.UserEquipments.destroy({where:{id}});await _models.UserEstimationLibrary.destroy({where:{equipmentId:id,estimationId:destinationEstimationId}});}// delete materials
for(let i=0;i<dseMaterial.length;i++){const id=dseMaterial[i].id;await _models.UserMaterials.destroy({where:{id}});await _models.UserEstimationLibrary.destroy({where:{materialId:id,estimationId:destinationEstimationId}});}// delete labours
for(let i=0;i<dseLabours.length;i++){const id=dseLabours[i].id;await _models.UserLabours.destroy({where:{id}});await _models.UserEstimationLibrary.destroy({where:{labourId:id,estimationId:destinationEstimationId}});}// delete subcontractor
for(let i=0;i<dseSub.length;i++){const id=dseSub[i].id;await _models.UserSubContractors.destroy({where:{id}});await _models.UserEstimationLibrary.destroy({where:{subContractorId:id,estimationId:destinationEstimationId}});}// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,UserEstimationLibrary:library}=equipments[i];const currency=equipments[i]?.currency;const newEquipment=await _models.UserEquipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,userId:managerId?managerId:userId,projectId:destinationProjectId,currency});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:library?.equipmentTotalAmount?library?.equipmentTotalAmount:0,estimationId:destinationEstimationId,userId:managerId?managerId:userId});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,UserEstimationLibrary:library}=materials[i];const currency=materials[i]?.currency;// create new material
const newMaterial=await _models.UserMaterials.create({name,quantity,unit,caveragePerUnit,price,supplierId,userId:managerId?managerId:userId,projectId:destinationProjectId,currency});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:library?.materialTotalAmount?library?.materialTotalAmount:0,estimationId:destinationEstimationId,userId:managerId?managerId:userId});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,UserEstimationLibrary:library}=labours[i];const currency=labours[i]?.currency;const newLabour=await _models.UserLabours.create({name,number,unit,wages,caveragePerUnit,userId:managerId?managerId:userId,projectId:destinationProjectId,currency});// create new UserEstimationLibary
await _models.UserEstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:library?.labourTotalAmount?library?.labourTotalAmount:0,estimationId:destinationEstimationId,userId:managerId?managerId:userId});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,UserEstimationLibrary:library}=subContractors[i];const currency=subContractors[i]?.currency;const newSubContractor=await _models.UserSubContractors.create({name,unit,quantity,price,userId:managerId?managerId:userId,projectId:destinationProjectId,currency});await await _models.UserEstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:library?.subContractorTotalAmount?library?.subContractorTotalAmount:0,estimationId:destinationEstimationId,userId:managerId?managerId:userId});}await(0,_computation.calculateSimilarProjectEquipment)(destinationProjectId),await(0,_computation.calculateSimilarProjectMaterial)(destinationProjectId);await(0,_computation.calculateSimilarProjectLabour)(destinationProjectId);await(0,_computation.calculateSimilarProjectSubcontractor)(destinationProjectId);const updates=await destiest2.reload();return(0,_utils.onSuccess)(res,200,"resources mapped successfully",updates);}if(role==='owner'){const sourceproject=await _models.Templates.findOne({where:{id:sourceProjectId}});const destinationProject=await _models.Templates.findOne({where:{id:destinationProjectId}});if(!sourceproject){return(0,_utils.onError)(res,404,'source template not found');}if(!destinationProject){return(0,_utils.onError)(res,404,'destination template not found');}const sourceest1=await _models.Estimations.findOne({where:{id:sourceEstimationId,templateId:sourceproject.id},include:[{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});const destiest2=await _models.Estimations.findOne({where:{id:destinationEstimationId,templateId:destinationProjectId},include:[{model:_models.Materials,as:"materials",order:[["id","DESC"]],attributes:["id","name","quantity","unit","caveragePerUnit","price"],through:{attributes:["materialFactorQuantity","materialTotalAmount"]}},{model:_models.Equipments,as:"equipments",attributes:["id","name","unit","caveragePerUnit","hireRatePrice","number"],through:{attributes:["equipmentPerformance","equipmentTotalAmount"]}},{model:_models.Labours,as:"labours",attributes:["id","name","number","unit","caveragePerUnit","wages"],through:{attributes:["labourFactorQuantity","labourTotalAmount"]}},{model:_models.SubContractors,as:"subContractors",attributes:["id","name","unit","quantity","price"],through:{attributes:["subContractorTotalAmount"]}}]});if(!sourceest1){return(0,_utils.onError)(res,404,'source activity not found');}if(!destiest2){return(0,_utils.onError)(res,404,'destination activity not found');}const{equipments,materials,labours,subContractors}=sourceest1;const{equipments:desEquipment,materials:dseMaterial,labours:dseLabours,subContractors:dseSub}=destiest2;// delete existing resources
// delete equipments
for(let i=0;i<desEquipment.length;i++){const id=desEquipment[i].id;await _models.Equipments.destroy({where:{id}});await _models.EstimationLibrary.destroy({where:{equipmentId:id,estimationId:destinationEstimationId}});}// delete materials
for(let i=0;i<dseMaterial.length;i++){const id=dseMaterial[i].id;await _models.Materials.destroy({where:{id}});await _models.EstimationLibrary.destroy({where:{materialId:id,estimationId:destinationEstimationId}});}// delete labours
for(let i=0;i<dseLabours.length;i++){const id=dseLabours[i].id;await _models.Labours.destroy({where:{id}});await _models.EstimationLibrary.destroy({where:{labourId:id,estimationId:destinationEstimationId}});}// delete subcontractor
for(let i=0;i<dseSub.length;i++){const id=dseSub[i].id;await _models.SubContractors.destroy({where:{id}});await _models.EstimationLibrary.destroy({where:{subContractorId:id,estimationId:destinationEstimationId}});}// loop through equipment
for(let i=0;i<equipments.length;i++){const{name,unit,caveragePerUnit,hireRatePrice,number,supplierId,EstimationLibrary:library}=equipments[i];const currency=equipments[i]?.currency;const newEquipment=await _models.Equipments.create({name,unit,caveragePerUnit,hireRatePrice,number,supplierId,templateId:destinationProjectId,currency});// create new UserEstimationLibary
await _models.EstimationLibrary.create({equipmentId:newEquipment.id,equipmentPerformance:library?.equipmentPerformance?library?.equipmentPerformance:0,equipmentTotalAmount:library?.equipmentTotalAmount?library?.equipmentTotalAmount:0,estimationId:destinationEstimationId});}// LOOP THROUGH Materials
for(let i=0;i<materials.length;i++){const{name,quantity,unit,caveragePerUnit,price,supplierId,EstimationLibrary:library}=materials[i];const currency=materials[i]?.currency;// create new material
const newMaterial=await _models.Materials.create({name,quantity,unit,caveragePerUnit,price,supplierId,templateId:destinationProjectId,currency});// create new UserEstimationLibary
await _models.EstimationLibrary.create({materialId:newMaterial.id,materialFactorQuantity:library?.materialFactorQuantity?library?.materialFactorQuantity:0,materialTotalAmount:library?.materialTotalAmount?library?.materialTotalAmount:0,estimationId:destinationEstimationId});}// LOOP THROUGH labours
for(let i=0;i<labours.length;i++){const{name,number,unit,wages,caveragePerUnit,EstimationLibrary:library}=labours[i];const currency=labours[i]?.currency;const newLabour=await _models.Labours.create({name,number,unit,wages,caveragePerUnit,userId:managerId?managerId:userId,templateId:destinationProjectId,currency});// create new UserEstimationLibary
await _models.EstimationLibrary.create({labourId:newLabour.id,labourFactorQuantity:library?.labourFactorQuantity?library?.labourFactorQuantity:0,labourTotalAmount:library?.labourTotalAmount?library?.labourTotalAmount:0,estimationId:destinationEstimationId});}// LOOP THROUGH subContractors
for(let i=0;i<subContractors.length;i++){const{name,unit,quantity,price,EstimationLibrary:library}=subContractors[i];const currency=subContractors[i]?.currency;const newSubContractor=await _models.SubContractors.create({name,unit,quantity,price,templateId:destinationProjectId,currency});await await _models.EstimationLibrary.create({subContractorId:newSubContractor.id,subContractorTotalAmount:library?.subContractorTotalAmount?library?.subContractorTotalAmount:0,estimationId:destinationEstimationId});}await(0,_computation.calculateSimilarProjectEquipment)(destinationProjectId),await(0,_computation.calculateSimilarProjectMaterial)(destinationProjectId);await(0,_computation.calculateSimilarProjectLabour)(destinationProjectId);await(0,_computation.calculateSimilarProjectSubcontractor)(destinationProjectId);const updates=await destiest2.reload();return(0,_utils.onSuccess)(res,200,"resources mapped successfully",updates);}}catch(error){console.log(error);return(0,_utils.onError)(res,500,"something went wrong. try again");}}}var _default=exports.default=UserProjectsController;